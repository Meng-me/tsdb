// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: query.proto

#include "query.pb.h"
#include "query.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbquery {

static const char* Query_method_names[] = {
  "/dbquery.Query/SendListInit",
  "/dbquery.Query/SendListUpdate",
  "/dbquery.Query/SendListBatchedUpdate",
  "/dbquery.Query/SendSPPInit",
  "/dbquery.Query/SendSPPUpdate",
  "/dbquery.Query/SendSPPBatchedUpdate",
  "/dbquery.Query/SendAggQuery",
  "/dbquery.Query/SendDEshare",
  "/dbquery.Query/SendGetZshare",
  "/dbquery.Query/SendAgg",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendListInit_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendListUpdate_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendListBatchedUpdate_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSPPInit_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSPPUpdate_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSPPBatchedUpdate_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendAggQuery_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDEshare_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendGetZshare_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendAgg_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::dbquery::InitListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::InitListRequest, ::dbquery::InitListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendListInit_, context, request, response);
}

void Query::Stub::async::SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::InitListRequest, ::dbquery::InitListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListInit_, context, request, response, std::move(f));
}

void Query::Stub::async::SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>* Query::Stub::PrepareAsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::InitListResponse, ::dbquery::InitListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendListInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>* Query::Stub::AsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendListInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::dbquery::UpdateListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendListUpdate_, context, request, response);
}

void Query::Stub::async::SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListUpdate_, context, request, response, std::move(f));
}

void Query::Stub::async::SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>* Query::Stub::PrepareAsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::UpdateListResponse, ::dbquery::UpdateListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendListUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>* Query::Stub::AsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendListUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::dbquery::BatchedUpdateListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendListBatchedUpdate_, context, request, response);
}

void Query::Stub::async::SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListBatchedUpdate_, context, request, response, std::move(f));
}

void Query::Stub::async::SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendListBatchedUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>* Query::Stub::PrepareAsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::BatchedUpdateListResponse, ::dbquery::BatchedUpdateListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendListBatchedUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>* Query::Stub::AsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendListBatchedUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::dbquery::InitSPPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSPPInit_, context, request, response);
}

void Query::Stub::async::SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPInit_, context, request, response, std::move(f));
}

void Query::Stub::async::SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>* Query::Stub::PrepareAsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::InitSPPResponse, ::dbquery::InitSPPRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSPPInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>* Query::Stub::AsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSPPInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::dbquery::UpdateSPPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSPPUpdate_, context, request, response);
}

void Query::Stub::async::SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPUpdate_, context, request, response, std::move(f));
}

void Query::Stub::async::SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>* Query::Stub::PrepareAsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::UpdateSPPResponse, ::dbquery::UpdateSPPRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSPPUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>* Query::Stub::AsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSPPUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::dbquery::BatchedUpdateSPPResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSPPBatchedUpdate_, context, request, response);
}

void Query::Stub::async::SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPBatchedUpdate_, context, request, response, std::move(f));
}

void Query::Stub::async::SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSPPBatchedUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>* Query::Stub::PrepareAsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::BatchedUpdateSPPResponse, ::dbquery::BatchedUpdateSPPRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSPPBatchedUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>* Query::Stub::AsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSPPBatchedUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::dbquery::QueryAggResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendAggQuery_, context, request, response);
}

void Query::Stub::async::SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendAggQuery_, context, request, response, std::move(f));
}

void Query::Stub::async::SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendAggQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>* Query::Stub::PrepareAsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::QueryAggResponse, ::dbquery::QueryAggRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendAggQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>* Query::Stub::AsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendAggQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::dbquery::DEshareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::DEshareRequest, ::dbquery::DEshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDEshare_, context, request, response);
}

void Query::Stub::async::SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::DEshareRequest, ::dbquery::DEshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDEshare_, context, request, response, std::move(f));
}

void Query::Stub::async::SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDEshare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>* Query::Stub::PrepareAsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::DEshareResponse, ::dbquery::DEshareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDEshare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>* Query::Stub::AsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDEshareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::dbquery::ZshareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::ZshareRequest, ::dbquery::ZshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendGetZshare_, context, request, response);
}

void Query::Stub::async::SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::ZshareRequest, ::dbquery::ZshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGetZshare_, context, request, response, std::move(f));
}

void Query::Stub::async::SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGetZshare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>* Query::Stub::PrepareAsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::ZshareResponse, ::dbquery::ZshareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendGetZshare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>* Query::Stub::AsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendGetZshareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::dbquery::AggResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::AggRequest, ::dbquery::AggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendAgg_, context, request, response);
}

void Query::Stub::async::SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::AggRequest, ::dbquery::AggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendAgg_, context, request, response, std::move(f));
}

void Query::Stub::async::SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendAgg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>* Query::Stub::PrepareAsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::AggResponse, ::dbquery::AggRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendAgg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>* Query::Stub::AsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendAggRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::InitListRequest, ::dbquery::InitListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::InitListRequest* req,
             ::dbquery::InitListResponse* resp) {
               return service->SendListInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::UpdateListRequest* req,
             ::dbquery::UpdateListResponse* resp) {
               return service->SendListUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::BatchedUpdateListRequest* req,
             ::dbquery::BatchedUpdateListResponse* resp) {
               return service->SendListBatchedUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::InitSPPRequest* req,
             ::dbquery::InitSPPResponse* resp) {
               return service->SendSPPInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::UpdateSPPRequest* req,
             ::dbquery::UpdateSPPResponse* resp) {
               return service->SendSPPUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::BatchedUpdateSPPRequest* req,
             ::dbquery::BatchedUpdateSPPResponse* resp) {
               return service->SendSPPBatchedUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::QueryAggRequest* req,
             ::dbquery::QueryAggResponse* resp) {
               return service->SendAggQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::DEshareRequest, ::dbquery::DEshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::DEshareRequest* req,
             ::dbquery::DEshareResponse* resp) {
               return service->SendDEshare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::ZshareRequest, ::dbquery::ZshareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::ZshareRequest* req,
             ::dbquery::ZshareResponse* resp) {
               return service->SendGetZshare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::dbquery::AggRequest, ::dbquery::AggResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::AggRequest* req,
             ::dbquery::AggResponse* resp) {
               return service->SendAgg(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::SendListInit(::grpc::ServerContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendListUpdate(::grpc::ServerContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendListBatchedUpdate(::grpc::ServerContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendSPPInit(::grpc::ServerContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendSPPUpdate(::grpc::ServerContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendSPPBatchedUpdate(::grpc::ServerContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendAggQuery(::grpc::ServerContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendDEshare(::grpc::ServerContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendGetZshare(::grpc::ServerContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendAgg(::grpc::ServerContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Aggregate_method_names[] = {
  "/dbquery.Aggregate/SendSystemInit",
  "/dbquery.Aggregate/SendMult",
};

std::unique_ptr< Aggregate::Stub> Aggregate::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Aggregate::Stub> stub(new Aggregate::Stub(channel, options));
  return stub;
}

Aggregate::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendSystemInit_(Aggregate_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMult_(Aggregate_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Aggregate::Stub::SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::dbquery::InitSystemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSystemInit_, context, request, response);
}

void Aggregate::Stub::async::SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemInit_, context, request, response, std::move(f));
}

void Aggregate::Stub::async::SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSystemInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>* Aggregate::Stub::PrepareAsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::InitSystemResponse, ::dbquery::InitSystemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSystemInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>* Aggregate::Stub::AsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSystemInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Aggregate::Stub::SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::dbquery::MultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dbquery::MultRequest, ::dbquery::MultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMult_, context, request, response);
}

void Aggregate::Stub::async::SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dbquery::MultRequest, ::dbquery::MultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMult_, context, request, response, std::move(f));
}

void Aggregate::Stub::async::SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>* Aggregate::Stub::PrepareAsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dbquery::MultResponse, ::dbquery::MultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>* Aggregate::Stub::AsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMultRaw(context, request, cq);
  result->StartCall();
  return result;
}

Aggregate::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Aggregate_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Aggregate::Service, ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Aggregate::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::InitSystemRequest* req,
             ::dbquery::InitSystemResponse* resp) {
               return service->SendSystemInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Aggregate_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Aggregate::Service, ::dbquery::MultRequest, ::dbquery::MultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Aggregate::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dbquery::MultRequest* req,
             ::dbquery::MultResponse* resp) {
               return service->SendMult(ctx, req, resp);
             }, this)));
}

Aggregate::Service::~Service() {
}

::grpc::Status Aggregate::Service::SendSystemInit(::grpc::ServerContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Aggregate::Service::SendMult(::grpc::ServerContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbquery

