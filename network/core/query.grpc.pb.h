// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: query.proto
#ifndef GRPC_query_2eproto__INCLUDED
#define GRPC_query_2eproto__INCLUDED

#include "query.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dbquery {

// Defines the service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "dbquery.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::dbquery::InitListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>> AsyncSendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>>(AsyncSendListInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>> PrepareAsyncSendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>>(PrepareAsyncSendListInitRaw(context, request, cq));
    }
    virtual ::grpc::Status SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::dbquery::UpdateListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>> AsyncSendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>>(AsyncSendListUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>> PrepareAsyncSendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>>(PrepareAsyncSendListUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::dbquery::BatchedUpdateListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>> AsyncSendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>>(AsyncSendListBatchedUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>> PrepareAsyncSendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>>(PrepareAsyncSendListBatchedUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::dbquery::InitSPPResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>> AsyncSendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>>(AsyncSendSPPInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>> PrepareAsyncSendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>>(PrepareAsyncSendSPPInitRaw(context, request, cq));
    }
    virtual ::grpc::Status SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::dbquery::UpdateSPPResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>> AsyncSendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>>(AsyncSendSPPUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>> PrepareAsyncSendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>>(PrepareAsyncSendSPPUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::dbquery::BatchedUpdateSPPResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>> AsyncSendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>>(AsyncSendSPPBatchedUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>> PrepareAsyncSendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>>(PrepareAsyncSendSPPBatchedUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::dbquery::QueryAggResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>> AsyncSendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>>(AsyncSendAggQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>> PrepareAsyncSendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>>(PrepareAsyncSendAggQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::dbquery::DEshareResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>> AsyncSendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>>(AsyncSendDEshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>> PrepareAsyncSendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>>(PrepareAsyncSendDEshareRaw(context, request, cq));
    }
    virtual ::grpc::Status SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::dbquery::ZshareResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>> AsyncSendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>>(AsyncSendGetZshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>> PrepareAsyncSendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>>(PrepareAsyncSendGetZshareRaw(context, request, cq));
    }
    virtual ::grpc::Status SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::dbquery::AggResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>> AsyncSendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>>(AsyncSendAggRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>> PrepareAsyncSendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>>(PrepareAsyncSendAggRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Function invoked to send the request
      virtual void SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>* AsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitListResponse>* PrepareAsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>* AsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateListResponse>* PrepareAsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>* AsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateListResponse>* PrepareAsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>* AsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSPPResponse>* PrepareAsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>* AsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::UpdateSPPResponse>* PrepareAsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>* AsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::BatchedUpdateSPPResponse>* PrepareAsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>* AsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::QueryAggResponse>* PrepareAsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>* AsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::DEshareResponse>* PrepareAsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>* AsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::ZshareResponse>* PrepareAsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>* AsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::AggResponse>* PrepareAsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::dbquery::InitListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>> AsyncSendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>>(AsyncSendListInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>> PrepareAsyncSendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>>(PrepareAsyncSendListInitRaw(context, request, cq));
    }
    ::grpc::Status SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::dbquery::UpdateListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>> AsyncSendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>>(AsyncSendListUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>> PrepareAsyncSendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>>(PrepareAsyncSendListUpdateRaw(context, request, cq));
    }
    ::grpc::Status SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::dbquery::BatchedUpdateListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>> AsyncSendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>>(AsyncSendListBatchedUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>> PrepareAsyncSendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>>(PrepareAsyncSendListBatchedUpdateRaw(context, request, cq));
    }
    ::grpc::Status SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::dbquery::InitSPPResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>> AsyncSendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>>(AsyncSendSPPInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>> PrepareAsyncSendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>>(PrepareAsyncSendSPPInitRaw(context, request, cq));
    }
    ::grpc::Status SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::dbquery::UpdateSPPResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>> AsyncSendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>>(AsyncSendSPPUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>> PrepareAsyncSendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>>(PrepareAsyncSendSPPUpdateRaw(context, request, cq));
    }
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::dbquery::BatchedUpdateSPPResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>> AsyncSendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>>(AsyncSendSPPBatchedUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>> PrepareAsyncSendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>>(PrepareAsyncSendSPPBatchedUpdateRaw(context, request, cq));
    }
    ::grpc::Status SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::dbquery::QueryAggResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>> AsyncSendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>>(AsyncSendAggQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>> PrepareAsyncSendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>>(PrepareAsyncSendAggQueryRaw(context, request, cq));
    }
    ::grpc::Status SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::dbquery::DEshareResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>> AsyncSendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>>(AsyncSendDEshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>> PrepareAsyncSendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>>(PrepareAsyncSendDEshareRaw(context, request, cq));
    }
    ::grpc::Status SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::dbquery::ZshareResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>> AsyncSendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>>(AsyncSendGetZshareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>> PrepareAsyncSendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>>(PrepareAsyncSendGetZshareRaw(context, request, cq));
    }
    ::grpc::Status SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::dbquery::AggResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>> AsyncSendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>>(AsyncSendAggRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>> PrepareAsyncSendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>>(PrepareAsyncSendAggRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, std::function<void(::grpc::Status)>) override;
      void SendListInit(::grpc::ClientContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, std::function<void(::grpc::Status)>) override;
      void SendListUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, std::function<void(::grpc::Status)>) override;
      void SendListBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, std::function<void(::grpc::Status)>) override;
      void SendSPPInit(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, std::function<void(::grpc::Status)>) override;
      void SendSPPUpdate(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, std::function<void(::grpc::Status)>) override;
      void SendSPPBatchedUpdate(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, std::function<void(::grpc::Status)>) override;
      void SendAggQuery(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, std::function<void(::grpc::Status)>) override;
      void SendDEshare(::grpc::ClientContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, std::function<void(::grpc::Status)>) override;
      void SendGetZshare(::grpc::ClientContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, std::function<void(::grpc::Status)>) override;
      void SendAgg(::grpc::ClientContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>* AsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitListResponse>* PrepareAsyncSendListInitRaw(::grpc::ClientContext* context, const ::dbquery::InitListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>* AsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateListResponse>* PrepareAsyncSendListUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>* AsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateListResponse>* PrepareAsyncSendListBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>* AsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitSPPResponse>* PrepareAsyncSendSPPInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>* AsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::UpdateSPPResponse>* PrepareAsyncSendSPPUpdateRaw(::grpc::ClientContext* context, const ::dbquery::UpdateSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>* AsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::BatchedUpdateSPPResponse>* PrepareAsyncSendSPPBatchedUpdateRaw(::grpc::ClientContext* context, const ::dbquery::BatchedUpdateSPPRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>* AsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::QueryAggResponse>* PrepareAsyncSendAggQueryRaw(::grpc::ClientContext* context, const ::dbquery::QueryAggRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>* AsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::DEshareResponse>* PrepareAsyncSendDEshareRaw(::grpc::ClientContext* context, const ::dbquery::DEshareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>* AsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::ZshareResponse>* PrepareAsyncSendGetZshareRaw(::grpc::ClientContext* context, const ::dbquery::ZshareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>* AsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::AggResponse>* PrepareAsyncSendAggRaw(::grpc::ClientContext* context, const ::dbquery::AggRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendListInit_;
    const ::grpc::internal::RpcMethod rpcmethod_SendListUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SendListBatchedUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSPPInit_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSPPUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSPPBatchedUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SendAggQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDEshare_;
    const ::grpc::internal::RpcMethod rpcmethod_SendGetZshare_;
    const ::grpc::internal::RpcMethod rpcmethod_SendAgg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status SendListInit(::grpc::ServerContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response);
    virtual ::grpc::Status SendListUpdate(::grpc::ServerContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response);
    virtual ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response);
    virtual ::grpc::Status SendSPPInit(::grpc::ServerContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response);
    virtual ::grpc::Status SendSPPUpdate(::grpc::ServerContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response);
    virtual ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response);
    virtual ::grpc::Status SendAggQuery(::grpc::ServerContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response);
    virtual ::grpc::Status SendDEshare(::grpc::ServerContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response);
    virtual ::grpc::Status SendGetZshare(::grpc::ServerContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response);
    virtual ::grpc::Status SendAgg(::grpc::ServerContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendListInit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListInit(::grpc::ServerContext* context, ::dbquery::InitListRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::InitListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListUpdate(::grpc::ServerContext* context, ::dbquery::UpdateListRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::UpdateListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListBatchedUpdate(::grpc::ServerContext* context, ::dbquery::BatchedUpdateListRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::BatchedUpdateListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPInit(::grpc::ServerContext* context, ::dbquery::InitSPPRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::InitSPPResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPUpdate(::grpc::ServerContext* context, ::dbquery::UpdateSPPRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::UpdateSPPResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPBatchedUpdate(::grpc::ServerContext* context, ::dbquery::BatchedUpdateSPPRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::BatchedUpdateSPPResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAggQuery(::grpc::ServerContext* context, ::dbquery::QueryAggRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::QueryAggResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDEshare() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDEshare(::grpc::ServerContext* context, ::dbquery::DEshareRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::DEshareResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGetZshare(::grpc::ServerContext* context, ::dbquery::ZshareRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::ZshareResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendAgg() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAgg(::grpc::ServerContext* context, ::dbquery::AggRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::AggResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendListInit<WithAsyncMethod_SendListUpdate<WithAsyncMethod_SendListBatchedUpdate<WithAsyncMethod_SendSPPInit<WithAsyncMethod_SendSPPUpdate<WithAsyncMethod_SendSPPBatchedUpdate<WithAsyncMethod_SendAggQuery<WithAsyncMethod_SendDEshare<WithAsyncMethod_SendGetZshare<WithAsyncMethod_SendAgg<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendListInit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::InitListRequest, ::dbquery::InitListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::InitListRequest* request, ::dbquery::InitListResponse* response) { return this->SendListInit(context, request, response); }));}
    void SetMessageAllocatorFor_SendListInit(
        ::grpc::MessageAllocator< ::dbquery::InitListRequest, ::dbquery::InitListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::InitListRequest, ::dbquery::InitListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListInit(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::UpdateListRequest* request, ::dbquery::UpdateListResponse* response) { return this->SendListUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_SendListUpdate(
        ::grpc::MessageAllocator< ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::BatchedUpdateListRequest* request, ::dbquery::BatchedUpdateListResponse* response) { return this->SendListBatchedUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_SendListBatchedUpdate(
        ::grpc::MessageAllocator< ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListBatchedUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::InitSPPRequest* request, ::dbquery::InitSPPResponse* response) { return this->SendSPPInit(context, request, response); }));}
    void SetMessageAllocatorFor_SendSPPInit(
        ::grpc::MessageAllocator< ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPInit(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::UpdateSPPRequest* request, ::dbquery::UpdateSPPResponse* response) { return this->SendSPPUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_SendSPPUpdate(
        ::grpc::MessageAllocator< ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::BatchedUpdateSPPRequest* request, ::dbquery::BatchedUpdateSPPResponse* response) { return this->SendSPPBatchedUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_SendSPPBatchedUpdate(
        ::grpc::MessageAllocator< ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPBatchedUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::QueryAggRequest* request, ::dbquery::QueryAggResponse* response) { return this->SendAggQuery(context, request, response); }));}
    void SetMessageAllocatorFor_SendAggQuery(
        ::grpc::MessageAllocator< ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendAggQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDEshare() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::DEshareRequest, ::dbquery::DEshareResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::DEshareRequest* request, ::dbquery::DEshareResponse* response) { return this->SendDEshare(context, request, response); }));}
    void SetMessageAllocatorFor_SendDEshare(
        ::grpc::MessageAllocator< ::dbquery::DEshareRequest, ::dbquery::DEshareResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::DEshareRequest, ::dbquery::DEshareResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDEshare(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::ZshareRequest, ::dbquery::ZshareResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::ZshareRequest* request, ::dbquery::ZshareResponse* response) { return this->SendGetZshare(context, request, response); }));}
    void SetMessageAllocatorFor_SendGetZshare(
        ::grpc::MessageAllocator< ::dbquery::ZshareRequest, ::dbquery::ZshareResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::ZshareRequest, ::dbquery::ZshareResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGetZshare(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendAgg() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::AggRequest, ::dbquery::AggResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::AggRequest* request, ::dbquery::AggResponse* response) { return this->SendAgg(context, request, response); }));}
    void SetMessageAllocatorFor_SendAgg(
        ::grpc::MessageAllocator< ::dbquery::AggRequest, ::dbquery::AggResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::AggRequest, ::dbquery::AggResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendAgg(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendListInit<WithCallbackMethod_SendListUpdate<WithCallbackMethod_SendListBatchedUpdate<WithCallbackMethod_SendSPPInit<WithCallbackMethod_SendSPPUpdate<WithCallbackMethod_SendSPPBatchedUpdate<WithCallbackMethod_SendAggQuery<WithCallbackMethod_SendDEshare<WithCallbackMethod_SendGetZshare<WithCallbackMethod_SendAgg<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendListInit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDEshare() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendAgg() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendListInit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendListBatchedUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSPPBatchedUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAggQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDEshare() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDEshare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGetZshare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendAgg() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAgg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendListInit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendListInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendListUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendListBatchedUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendListBatchedUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSPPInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSPPUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSPPBatchedUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSPPBatchedUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendAggQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendAggQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDEshare() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDEshare(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDEshare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendGetZshare(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGetZshare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendAgg() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendAgg(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendAgg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendListInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendListInit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::InitListRequest, ::dbquery::InitListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::InitListRequest, ::dbquery::InitListResponse>* streamer) {
                       return this->StreamedSendListInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendListInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendListInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitListRequest* /*request*/, ::dbquery::InitListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendListInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::InitListRequest,::dbquery::InitListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendListUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendListUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::UpdateListRequest, ::dbquery::UpdateListResponse>* streamer) {
                       return this->StreamedSendListUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendListUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendListUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateListRequest* /*request*/, ::dbquery::UpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendListUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::UpdateListRequest,::dbquery::UpdateListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendListBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendListBatchedUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::BatchedUpdateListRequest, ::dbquery::BatchedUpdateListResponse>* streamer) {
                       return this->StreamedSendListBatchedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendListBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendListBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateListRequest* /*request*/, ::dbquery::BatchedUpdateListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendListBatchedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::BatchedUpdateListRequest,::dbquery::BatchedUpdateListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSPPInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSPPInit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::InitSPPRequest, ::dbquery::InitSPPResponse>* streamer) {
                       return this->StreamedSendSPPInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendSPPInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSPPInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSPPRequest* /*request*/, ::dbquery::InitSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSPPInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::InitSPPRequest,::dbquery::InitSPPResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSPPUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSPPUpdate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::UpdateSPPRequest, ::dbquery::UpdateSPPResponse>* streamer) {
                       return this->StreamedSendSPPUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendSPPUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSPPUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::UpdateSPPRequest* /*request*/, ::dbquery::UpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSPPUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::UpdateSPPRequest,::dbquery::UpdateSPPResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSPPBatchedUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSPPBatchedUpdate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::BatchedUpdateSPPRequest, ::dbquery::BatchedUpdateSPPResponse>* streamer) {
                       return this->StreamedSendSPPBatchedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendSPPBatchedUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSPPBatchedUpdate(::grpc::ServerContext* /*context*/, const ::dbquery::BatchedUpdateSPPRequest* /*request*/, ::dbquery::BatchedUpdateSPPResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSPPBatchedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::BatchedUpdateSPPRequest,::dbquery::BatchedUpdateSPPResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendAggQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendAggQuery() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::QueryAggRequest, ::dbquery::QueryAggResponse>* streamer) {
                       return this->StreamedSendAggQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendAggQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendAggQuery(::grpc::ServerContext* /*context*/, const ::dbquery::QueryAggRequest* /*request*/, ::dbquery::QueryAggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendAggQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::QueryAggRequest,::dbquery::QueryAggResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDEshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDEshare() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::DEshareRequest, ::dbquery::DEshareResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::DEshareRequest, ::dbquery::DEshareResponse>* streamer) {
                       return this->StreamedSendDEshare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendDEshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDEshare(::grpc::ServerContext* /*context*/, const ::dbquery::DEshareRequest* /*request*/, ::dbquery::DEshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDEshare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::DEshareRequest,::dbquery::DEshareResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendGetZshare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendGetZshare() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::ZshareRequest, ::dbquery::ZshareResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::ZshareRequest, ::dbquery::ZshareResponse>* streamer) {
                       return this->StreamedSendGetZshare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendGetZshare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendGetZshare(::grpc::ServerContext* /*context*/, const ::dbquery::ZshareRequest* /*request*/, ::dbquery::ZshareResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendGetZshare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::ZshareRequest,::dbquery::ZshareResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendAgg() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::AggRequest, ::dbquery::AggResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::AggRequest, ::dbquery::AggResponse>* streamer) {
                       return this->StreamedSendAgg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendAgg(::grpc::ServerContext* /*context*/, const ::dbquery::AggRequest* /*request*/, ::dbquery::AggResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendAgg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::AggRequest,::dbquery::AggResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendListInit<WithStreamedUnaryMethod_SendListUpdate<WithStreamedUnaryMethod_SendListBatchedUpdate<WithStreamedUnaryMethod_SendSPPInit<WithStreamedUnaryMethod_SendSPPUpdate<WithStreamedUnaryMethod_SendSPPBatchedUpdate<WithStreamedUnaryMethod_SendAggQuery<WithStreamedUnaryMethod_SendDEshare<WithStreamedUnaryMethod_SendGetZshare<WithStreamedUnaryMethod_SendAgg<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendListInit<WithStreamedUnaryMethod_SendListUpdate<WithStreamedUnaryMethod_SendListBatchedUpdate<WithStreamedUnaryMethod_SendSPPInit<WithStreamedUnaryMethod_SendSPPUpdate<WithStreamedUnaryMethod_SendSPPBatchedUpdate<WithStreamedUnaryMethod_SendAggQuery<WithStreamedUnaryMethod_SendDEshare<WithStreamedUnaryMethod_SendGetZshare<WithStreamedUnaryMethod_SendAgg<Service > > > > > > > > > > StreamedService;
};

class Aggregate final {
 public:
  static constexpr char const* service_full_name() {
    return "dbquery.Aggregate";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::dbquery::InitSystemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>> AsyncSendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>>(AsyncSendSystemInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>> PrepareAsyncSendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>>(PrepareAsyncSendSystemInitRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::dbquery::MultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>> AsyncSendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>>(AsyncSendMultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>> PrepareAsyncSendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>>(PrepareAsyncSendMultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>* AsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::InitSystemResponse>* PrepareAsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>* AsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbquery::MultResponse>* PrepareAsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::dbquery::InitSystemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>> AsyncSendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>>(AsyncSendSystemInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>> PrepareAsyncSendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>>(PrepareAsyncSendSystemInitRaw(context, request, cq));
    }
    ::grpc::Status SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::dbquery::MultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>> AsyncSendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>>(AsyncSendMultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>> PrepareAsyncSendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>>(PrepareAsyncSendMultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, std::function<void(::grpc::Status)>) override;
      void SendSystemInit(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMult(::grpc::ClientContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>* AsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::InitSystemResponse>* PrepareAsyncSendSystemInitRaw(::grpc::ClientContext* context, const ::dbquery::InitSystemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>* AsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbquery::MultResponse>* PrepareAsyncSendMultRaw(::grpc::ClientContext* context, const ::dbquery::MultRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendSystemInit_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendSystemInit(::grpc::ServerContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response);
    virtual ::grpc::Status SendMult(::grpc::ServerContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSystemInit(::grpc::ServerContext* context, ::dbquery::InitSystemRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::InitSystemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMult(::grpc::ServerContext* context, ::dbquery::MultRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbquery::MultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendSystemInit<WithAsyncMethod_SendMult<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::InitSystemRequest* request, ::dbquery::InitSystemResponse* response) { return this->SendSystemInit(context, request, response); }));}
    void SetMessageAllocatorFor_SendSystemInit(
        ::grpc::MessageAllocator< ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSystemInit(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMult() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dbquery::MultRequest, ::dbquery::MultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dbquery::MultRequest* request, ::dbquery::MultResponse* response) { return this->SendMult(context, request, response); }));}
    void SetMessageAllocatorFor_SendMult(
        ::grpc::MessageAllocator< ::dbquery::MultRequest, ::dbquery::MultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dbquery::MultRequest, ::dbquery::MultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMult(
      ::grpc::CallbackServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendSystemInit<WithCallbackMethod_SendMult<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSystemInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSystemInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSystemInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMult() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMult(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSystemInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSystemInit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::InitSystemRequest, ::dbquery::InitSystemResponse>* streamer) {
                       return this->StreamedSendSystemInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendSystemInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSystemInit(::grpc::ServerContext* /*context*/, const ::dbquery::InitSystemRequest* /*request*/, ::dbquery::InitSystemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSystemInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::InitSystemRequest,::dbquery::InitSystemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbquery::MultRequest, ::dbquery::MultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dbquery::MultRequest, ::dbquery::MultResponse>* streamer) {
                       return this->StreamedSendMult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMult(::grpc::ServerContext* /*context*/, const ::dbquery::MultRequest* /*request*/, ::dbquery::MultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbquery::MultRequest,::dbquery::MultResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendSystemInit<WithStreamedUnaryMethod_SendMult<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendSystemInit<WithStreamedUnaryMethod_SendMult<Service > > StreamedService;
};

}  // namespace dbquery


#endif  // GRPC_query_2eproto__INCLUDED
