// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto;
namespace dbquery {
class AggRequest;
struct AggRequestDefaultTypeInternal;
extern AggRequestDefaultTypeInternal _AggRequest_default_instance_;
class AggResponse;
struct AggResponseDefaultTypeInternal;
extern AggResponseDefaultTypeInternal _AggResponse_default_instance_;
class BaseFilter;
struct BaseFilterDefaultTypeInternal;
extern BaseFilterDefaultTypeInternal _BaseFilter_default_instance_;
class BatchedUpdateListRequest;
struct BatchedUpdateListRequestDefaultTypeInternal;
extern BatchedUpdateListRequestDefaultTypeInternal _BatchedUpdateListRequest_default_instance_;
class BatchedUpdateListResponse;
struct BatchedUpdateListResponseDefaultTypeInternal;
extern BatchedUpdateListResponseDefaultTypeInternal _BatchedUpdateListResponse_default_instance_;
class BatchedUpdateSPPRequest;
struct BatchedUpdateSPPRequestDefaultTypeInternal;
extern BatchedUpdateSPPRequestDefaultTypeInternal _BatchedUpdateSPPRequest_default_instance_;
class BatchedUpdateSPPResponse;
struct BatchedUpdateSPPResponseDefaultTypeInternal;
extern BatchedUpdateSPPResponseDefaultTypeInternal _BatchedUpdateSPPResponse_default_instance_;
class CombinedFilter;
struct CombinedFilterDefaultTypeInternal;
extern CombinedFilterDefaultTypeInternal _CombinedFilter_default_instance_;
class DEshareRequest;
struct DEshareRequestDefaultTypeInternal;
extern DEshareRequestDefaultTypeInternal _DEshareRequest_default_instance_;
class DEshareResponse;
struct DEshareResponseDefaultTypeInternal;
extern DEshareResponseDefaultTypeInternal _DEshareResponse_default_instance_;
class InitListRequest;
struct InitListRequestDefaultTypeInternal;
extern InitListRequestDefaultTypeInternal _InitListRequest_default_instance_;
class InitListResponse;
struct InitListResponseDefaultTypeInternal;
extern InitListResponseDefaultTypeInternal _InitListResponse_default_instance_;
class InitSPPRequest;
struct InitSPPRequestDefaultTypeInternal;
extern InitSPPRequestDefaultTypeInternal _InitSPPRequest_default_instance_;
class InitSPPResponse;
struct InitSPPResponseDefaultTypeInternal;
extern InitSPPResponseDefaultTypeInternal _InitSPPResponse_default_instance_;
class InitSystemRequest;
struct InitSystemRequestDefaultTypeInternal;
extern InitSystemRequestDefaultTypeInternal _InitSystemRequest_default_instance_;
class InitSystemResponse;
struct InitSystemResponseDefaultTypeInternal;
extern InitSystemResponseDefaultTypeInternal _InitSystemResponse_default_instance_;
class MultRequest;
struct MultRequestDefaultTypeInternal;
extern MultRequestDefaultTypeInternal _MultRequest_default_instance_;
class MultResponse;
struct MultResponseDefaultTypeInternal;
extern MultResponseDefaultTypeInternal _MultResponse_default_instance_;
class QueryAggRequest;
struct QueryAggRequestDefaultTypeInternal;
extern QueryAggRequestDefaultTypeInternal _QueryAggRequest_default_instance_;
class QueryAggResponse;
struct QueryAggResponseDefaultTypeInternal;
extern QueryAggResponseDefaultTypeInternal _QueryAggResponse_default_instance_;
class UpdateListRequest;
struct UpdateListRequestDefaultTypeInternal;
extern UpdateListRequestDefaultTypeInternal _UpdateListRequest_default_instance_;
class UpdateListResponse;
struct UpdateListResponseDefaultTypeInternal;
extern UpdateListResponseDefaultTypeInternal _UpdateListResponse_default_instance_;
class UpdateSPPRequest;
struct UpdateSPPRequestDefaultTypeInternal;
extern UpdateSPPRequestDefaultTypeInternal _UpdateSPPRequest_default_instance_;
class UpdateSPPResponse;
struct UpdateSPPResponseDefaultTypeInternal;
extern UpdateSPPResponseDefaultTypeInternal _UpdateSPPResponse_default_instance_;
class ZshareRequest;
struct ZshareRequestDefaultTypeInternal;
extern ZshareRequestDefaultTypeInternal _ZshareRequest_default_instance_;
class ZshareResponse;
struct ZshareResponseDefaultTypeInternal;
extern ZshareResponseDefaultTypeInternal _ZshareResponse_default_instance_;
}  // namespace dbquery
PROTOBUF_NAMESPACE_OPEN
template<> ::dbquery::AggRequest* Arena::CreateMaybeMessage<::dbquery::AggRequest>(Arena*);
template<> ::dbquery::AggResponse* Arena::CreateMaybeMessage<::dbquery::AggResponse>(Arena*);
template<> ::dbquery::BaseFilter* Arena::CreateMaybeMessage<::dbquery::BaseFilter>(Arena*);
template<> ::dbquery::BatchedUpdateListRequest* Arena::CreateMaybeMessage<::dbquery::BatchedUpdateListRequest>(Arena*);
template<> ::dbquery::BatchedUpdateListResponse* Arena::CreateMaybeMessage<::dbquery::BatchedUpdateListResponse>(Arena*);
template<> ::dbquery::BatchedUpdateSPPRequest* Arena::CreateMaybeMessage<::dbquery::BatchedUpdateSPPRequest>(Arena*);
template<> ::dbquery::BatchedUpdateSPPResponse* Arena::CreateMaybeMessage<::dbquery::BatchedUpdateSPPResponse>(Arena*);
template<> ::dbquery::CombinedFilter* Arena::CreateMaybeMessage<::dbquery::CombinedFilter>(Arena*);
template<> ::dbquery::DEshareRequest* Arena::CreateMaybeMessage<::dbquery::DEshareRequest>(Arena*);
template<> ::dbquery::DEshareResponse* Arena::CreateMaybeMessage<::dbquery::DEshareResponse>(Arena*);
template<> ::dbquery::InitListRequest* Arena::CreateMaybeMessage<::dbquery::InitListRequest>(Arena*);
template<> ::dbquery::InitListResponse* Arena::CreateMaybeMessage<::dbquery::InitListResponse>(Arena*);
template<> ::dbquery::InitSPPRequest* Arena::CreateMaybeMessage<::dbquery::InitSPPRequest>(Arena*);
template<> ::dbquery::InitSPPResponse* Arena::CreateMaybeMessage<::dbquery::InitSPPResponse>(Arena*);
template<> ::dbquery::InitSystemRequest* Arena::CreateMaybeMessage<::dbquery::InitSystemRequest>(Arena*);
template<> ::dbquery::InitSystemResponse* Arena::CreateMaybeMessage<::dbquery::InitSystemResponse>(Arena*);
template<> ::dbquery::MultRequest* Arena::CreateMaybeMessage<::dbquery::MultRequest>(Arena*);
template<> ::dbquery::MultResponse* Arena::CreateMaybeMessage<::dbquery::MultResponse>(Arena*);
template<> ::dbquery::QueryAggRequest* Arena::CreateMaybeMessage<::dbquery::QueryAggRequest>(Arena*);
template<> ::dbquery::QueryAggResponse* Arena::CreateMaybeMessage<::dbquery::QueryAggResponse>(Arena*);
template<> ::dbquery::UpdateListRequest* Arena::CreateMaybeMessage<::dbquery::UpdateListRequest>(Arena*);
template<> ::dbquery::UpdateListResponse* Arena::CreateMaybeMessage<::dbquery::UpdateListResponse>(Arena*);
template<> ::dbquery::UpdateSPPRequest* Arena::CreateMaybeMessage<::dbquery::UpdateSPPRequest>(Arena*);
template<> ::dbquery::UpdateSPPResponse* Arena::CreateMaybeMessage<::dbquery::UpdateSPPResponse>(Arena*);
template<> ::dbquery::ZshareRequest* Arena::CreateMaybeMessage<::dbquery::ZshareRequest>(Arena*);
template<> ::dbquery::ZshareResponse* Arena::CreateMaybeMessage<::dbquery::ZshareResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dbquery {

// ===================================================================

class InitSystemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitSystemRequest) */ {
 public:
  inline InitSystemRequest() : InitSystemRequest(nullptr) {}
  ~InitSystemRequest() override;
  explicit constexpr InitSystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitSystemRequest(const InitSystemRequest& from);
  InitSystemRequest(InitSystemRequest&& from) noexcept
    : InitSystemRequest() {
    *this = ::std::move(from);
  }

  inline InitSystemRequest& operator=(const InitSystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSystemRequest& operator=(InitSystemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitSystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitSystemRequest* internal_default_instance() {
    return reinterpret_cast<const InitSystemRequest*>(
               &_InitSystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitSystemRequest& a, InitSystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSystemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitSystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitSystemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitSystemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitSystemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSystemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitSystemRequest";
  }
  protected:
  explicit InitSystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitSystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class InitSystemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitSystemResponse) */ {
 public:
  inline InitSystemResponse() : InitSystemResponse(nullptr) {}
  ~InitSystemResponse() override;
  explicit constexpr InitSystemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitSystemResponse(const InitSystemResponse& from);
  InitSystemResponse(InitSystemResponse&& from) noexcept
    : InitSystemResponse() {
    *this = ::std::move(from);
  }

  inline InitSystemResponse& operator=(const InitSystemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSystemResponse& operator=(InitSystemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitSystemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitSystemResponse* internal_default_instance() {
    return reinterpret_cast<const InitSystemResponse*>(
               &_InitSystemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitSystemResponse& a, InitSystemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSystemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSystemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitSystemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitSystemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitSystemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitSystemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSystemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitSystemResponse";
  }
  protected:
  explicit InitSystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitSystemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class MultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.MultRequest) */ {
 public:
  inline MultRequest() : MultRequest(nullptr) {}
  ~MultRequest() override;
  explicit constexpr MultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultRequest(const MultRequest& from);
  MultRequest(MultRequest&& from) noexcept
    : MultRequest() {
    *this = ::std::move(from);
  }

  inline MultRequest& operator=(const MultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultRequest& operator=(MultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultRequest* internal_default_instance() {
    return reinterpret_cast<const MultRequest*>(
               &_MultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultRequest& a, MultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.MultRequest";
  }
  protected:
  explicit MultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShares0FieldNumber = 1,
    kShares1FieldNumber = 2,
  };
  // bytes shares0 = 1;
  void clear_shares0();
  const std::string& shares0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shares0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shares0();
  PROTOBUF_NODISCARD std::string* release_shares0();
  void set_allocated_shares0(std::string* shares0);
  private:
  const std::string& _internal_shares0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shares0(const std::string& value);
  std::string* _internal_mutable_shares0();
  public:

  // bytes shares1 = 2;
  void clear_shares1();
  const std::string& shares1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shares1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shares1();
  PROTOBUF_NODISCARD std::string* release_shares1();
  void set_allocated_shares1(std::string* shares1);
  private:
  const std::string& _internal_shares1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shares1(const std::string& value);
  std::string* _internal_mutable_shares1();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.MultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shares0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shares1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class MultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.MultResponse) */ {
 public:
  inline MultResponse() : MultResponse(nullptr) {}
  ~MultResponse() override;
  explicit constexpr MultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultResponse(const MultResponse& from);
  MultResponse(MultResponse&& from) noexcept
    : MultResponse() {
    *this = ::std::move(from);
  }

  inline MultResponse& operator=(const MultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultResponse& operator=(MultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultResponse* internal_default_instance() {
    return reinterpret_cast<const MultResponse*>(
               &_MultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultResponse& a, MultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.MultResponse";
  }
  protected:
  explicit MultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // bytes res = 1;
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_NODISCARD std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.MultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class InitListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitListRequest) */ {
 public:
  inline InitListRequest() : InitListRequest(nullptr) {}
  ~InitListRequest() override;
  explicit constexpr InitListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitListRequest(const InitListRequest& from);
  InitListRequest(InitListRequest&& from) noexcept
    : InitListRequest() {
    *this = ::std::move(from);
  }

  inline InitListRequest& operator=(const InitListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitListRequest& operator=(InitListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitListRequest* internal_default_instance() {
    return reinterpret_cast<const InitListRequest*>(
               &_InitListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitListRequest& a, InitListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitListRequest";
  }
  protected:
  explicit InitListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWindowSizeFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 window_size = 2;
  void clear_window_size();
  uint32_t window_size() const;
  void set_window_size(uint32_t value);
  private:
  uint32_t _internal_window_size() const;
  void _internal_set_window_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint32_t window_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class InitListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitListResponse) */ {
 public:
  inline InitListResponse() : InitListResponse(nullptr) {}
  ~InitListResponse() override;
  explicit constexpr InitListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitListResponse(const InitListResponse& from);
  InitListResponse(InitListResponse&& from) noexcept
    : InitListResponse() {
    *this = ::std::move(from);
  }

  inline InitListResponse& operator=(const InitListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitListResponse& operator=(InitListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitListResponse* internal_default_instance() {
    return reinterpret_cast<const InitListResponse*>(
               &_InitListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitListResponse& a, InitListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitListResponse";
  }
  protected:
  explicit InitListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class UpdateListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.UpdateListRequest) */ {
 public:
  inline UpdateListRequest() : UpdateListRequest(nullptr) {}
  ~UpdateListRequest() override;
  explicit constexpr UpdateListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateListRequest(const UpdateListRequest& from);
  UpdateListRequest(UpdateListRequest&& from) noexcept
    : UpdateListRequest() {
    *this = ::std::move(from);
  }

  inline UpdateListRequest& operator=(const UpdateListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateListRequest& operator=(UpdateListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateListRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateListRequest*>(
               &_UpdateListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateListRequest& a, UpdateListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.UpdateListRequest";
  }
  protected:
  explicit UpdateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kShare0FieldNumber = 3,
    kValFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes share0 = 3;
  void clear_share0();
  const std::string& share0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share0();
  PROTOBUF_NODISCARD std::string* release_share0();
  void set_allocated_share0(std::string* share0);
  private:
  const std::string& _internal_share0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share0(const std::string& value);
  std::string* _internal_mutable_share0();
  public:

  // uint32 val = 2;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.UpdateListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share0_;
  uint32_t val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class BatchedUpdateListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.BatchedUpdateListRequest) */ {
 public:
  inline BatchedUpdateListRequest() : BatchedUpdateListRequest(nullptr) {}
  ~BatchedUpdateListRequest() override;
  explicit constexpr BatchedUpdateListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchedUpdateListRequest(const BatchedUpdateListRequest& from);
  BatchedUpdateListRequest(BatchedUpdateListRequest&& from) noexcept
    : BatchedUpdateListRequest() {
    *this = ::std::move(from);
  }

  inline BatchedUpdateListRequest& operator=(const BatchedUpdateListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchedUpdateListRequest& operator=(BatchedUpdateListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchedUpdateListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchedUpdateListRequest* internal_default_instance() {
    return reinterpret_cast<const BatchedUpdateListRequest*>(
               &_BatchedUpdateListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BatchedUpdateListRequest& a, BatchedUpdateListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchedUpdateListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchedUpdateListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchedUpdateListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchedUpdateListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchedUpdateListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchedUpdateListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchedUpdateListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.BatchedUpdateListRequest";
  }
  protected:
  explicit BatchedUpdateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .dbquery.UpdateListRequest updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::dbquery::UpdateListRequest* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateListRequest >*
      mutable_updates();
  private:
  const ::dbquery::UpdateListRequest& _internal_updates(int index) const;
  ::dbquery::UpdateListRequest* _internal_add_updates();
  public:
  const ::dbquery::UpdateListRequest& updates(int index) const;
  ::dbquery::UpdateListRequest* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateListRequest >&
      updates() const;

  // @@protoc_insertion_point(class_scope:dbquery.BatchedUpdateListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateListRequest > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class UpdateListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.UpdateListResponse) */ {
 public:
  inline UpdateListResponse() : UpdateListResponse(nullptr) {}
  ~UpdateListResponse() override;
  explicit constexpr UpdateListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateListResponse(const UpdateListResponse& from);
  UpdateListResponse(UpdateListResponse&& from) noexcept
    : UpdateListResponse() {
    *this = ::std::move(from);
  }

  inline UpdateListResponse& operator=(const UpdateListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateListResponse& operator=(UpdateListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateListResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateListResponse*>(
               &_UpdateListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateListResponse& a, UpdateListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.UpdateListResponse";
  }
  protected:
  explicit UpdateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.UpdateListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class BatchedUpdateListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.BatchedUpdateListResponse) */ {
 public:
  inline BatchedUpdateListResponse() : BatchedUpdateListResponse(nullptr) {}
  ~BatchedUpdateListResponse() override;
  explicit constexpr BatchedUpdateListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchedUpdateListResponse(const BatchedUpdateListResponse& from);
  BatchedUpdateListResponse(BatchedUpdateListResponse&& from) noexcept
    : BatchedUpdateListResponse() {
    *this = ::std::move(from);
  }

  inline BatchedUpdateListResponse& operator=(const BatchedUpdateListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchedUpdateListResponse& operator=(BatchedUpdateListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchedUpdateListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchedUpdateListResponse* internal_default_instance() {
    return reinterpret_cast<const BatchedUpdateListResponse*>(
               &_BatchedUpdateListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BatchedUpdateListResponse& a, BatchedUpdateListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchedUpdateListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchedUpdateListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchedUpdateListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchedUpdateListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchedUpdateListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchedUpdateListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchedUpdateListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.BatchedUpdateListResponse";
  }
  protected:
  explicit BatchedUpdateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.BatchedUpdateListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class InitSPPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitSPPRequest) */ {
 public:
  inline InitSPPRequest() : InitSPPRequest(nullptr) {}
  ~InitSPPRequest() override;
  explicit constexpr InitSPPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitSPPRequest(const InitSPPRequest& from);
  InitSPPRequest(InitSPPRequest&& from) noexcept
    : InitSPPRequest() {
    *this = ::std::move(from);
  }

  inline InitSPPRequest& operator=(const InitSPPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSPPRequest& operator=(InitSPPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitSPPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitSPPRequest* internal_default_instance() {
    return reinterpret_cast<const InitSPPRequest*>(
               &_InitSPPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InitSPPRequest& a, InitSPPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSPPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSPPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitSPPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitSPPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitSPPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitSPPRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSPPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitSPPRequest";
  }
  protected:
  explicit InitSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWindowSizeFieldNumber = 2,
    kNumBucketsFieldNumber = 3,
    kMaliciousFieldNumber = 4,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 window_size = 2;
  void clear_window_size();
  uint32_t window_size() const;
  void set_window_size(uint32_t value);
  private:
  uint32_t _internal_window_size() const;
  void _internal_set_window_size(uint32_t value);
  public:

  // uint32 num_buckets = 3;
  void clear_num_buckets();
  uint32_t num_buckets() const;
  void set_num_buckets(uint32_t value);
  private:
  uint32_t _internal_num_buckets() const;
  void _internal_set_num_buckets(uint32_t value);
  public:

  // bool malicious = 4;
  void clear_malicious();
  bool malicious() const;
  void set_malicious(bool value);
  private:
  bool _internal_malicious() const;
  void _internal_set_malicious(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitSPPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint32_t window_size_;
  uint32_t num_buckets_;
  bool malicious_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class InitSPPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.InitSPPResponse) */ {
 public:
  inline InitSPPResponse() : InitSPPResponse(nullptr) {}
  ~InitSPPResponse() override;
  explicit constexpr InitSPPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitSPPResponse(const InitSPPResponse& from);
  InitSPPResponse(InitSPPResponse&& from) noexcept
    : InitSPPResponse() {
    *this = ::std::move(from);
  }

  inline InitSPPResponse& operator=(const InitSPPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSPPResponse& operator=(InitSPPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitSPPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitSPPResponse* internal_default_instance() {
    return reinterpret_cast<const InitSPPResponse*>(
               &_InitSPPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InitSPPResponse& a, InitSPPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSPPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSPPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitSPPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitSPPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitSPPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitSPPResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSPPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.InitSPPResponse";
  }
  protected:
  explicit InitSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.InitSPPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class UpdateSPPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.UpdateSPPRequest) */ {
 public:
  inline UpdateSPPRequest() : UpdateSPPRequest(nullptr) {}
  ~UpdateSPPRequest() override;
  explicit constexpr UpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSPPRequest(const UpdateSPPRequest& from);
  UpdateSPPRequest(UpdateSPPRequest&& from) noexcept
    : UpdateSPPRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSPPRequest& operator=(const UpdateSPPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSPPRequest& operator=(UpdateSPPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSPPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSPPRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSPPRequest*>(
               &_UpdateSPPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateSPPRequest& a, UpdateSPPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSPPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSPPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSPPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSPPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSPPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSPPRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSPPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.UpdateSPPRequest";
  }
  protected:
  explicit UpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kData0FieldNumber = 3,
    kAFieldNumber = 4,
    kBFieldNumber = 5,
    kAbFieldNumber = 6,
    kValFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes data0 = 3;
  void clear_data0();
  const std::string& data0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data0();
  PROTOBUF_NODISCARD std::string* release_data0();
  void set_allocated_data0(std::string* data0);
  private:
  const std::string& _internal_data0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data0(const std::string& value);
  std::string* _internal_mutable_data0();
  public:

  // bytes a = 4;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // bytes b = 5;
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // bytes ab = 6;
  void clear_ab();
  const std::string& ab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ab();
  PROTOBUF_NODISCARD std::string* release_ab();
  void set_allocated_ab(std::string* ab);
  private:
  const std::string& _internal_ab() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ab(const std::string& value);
  std::string* _internal_mutable_ab();
  public:

  // uint32 val = 2;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.UpdateSPPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ab_;
  uint32_t val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class BatchedUpdateSPPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.BatchedUpdateSPPRequest) */ {
 public:
  inline BatchedUpdateSPPRequest() : BatchedUpdateSPPRequest(nullptr) {}
  ~BatchedUpdateSPPRequest() override;
  explicit constexpr BatchedUpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchedUpdateSPPRequest(const BatchedUpdateSPPRequest& from);
  BatchedUpdateSPPRequest(BatchedUpdateSPPRequest&& from) noexcept
    : BatchedUpdateSPPRequest() {
    *this = ::std::move(from);
  }

  inline BatchedUpdateSPPRequest& operator=(const BatchedUpdateSPPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchedUpdateSPPRequest& operator=(BatchedUpdateSPPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchedUpdateSPPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchedUpdateSPPRequest* internal_default_instance() {
    return reinterpret_cast<const BatchedUpdateSPPRequest*>(
               &_BatchedUpdateSPPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BatchedUpdateSPPRequest& a, BatchedUpdateSPPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchedUpdateSPPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchedUpdateSPPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchedUpdateSPPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchedUpdateSPPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchedUpdateSPPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchedUpdateSPPRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchedUpdateSPPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.BatchedUpdateSPPRequest";
  }
  protected:
  explicit BatchedUpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .dbquery.UpdateSPPRequest updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::dbquery::UpdateSPPRequest* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateSPPRequest >*
      mutable_updates();
  private:
  const ::dbquery::UpdateSPPRequest& _internal_updates(int index) const;
  ::dbquery::UpdateSPPRequest* _internal_add_updates();
  public:
  const ::dbquery::UpdateSPPRequest& updates(int index) const;
  ::dbquery::UpdateSPPRequest* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateSPPRequest >&
      updates() const;

  // @@protoc_insertion_point(class_scope:dbquery.BatchedUpdateSPPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateSPPRequest > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class UpdateSPPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.UpdateSPPResponse) */ {
 public:
  inline UpdateSPPResponse() : UpdateSPPResponse(nullptr) {}
  ~UpdateSPPResponse() override;
  explicit constexpr UpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSPPResponse(const UpdateSPPResponse& from);
  UpdateSPPResponse(UpdateSPPResponse&& from) noexcept
    : UpdateSPPResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSPPResponse& operator=(const UpdateSPPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSPPResponse& operator=(UpdateSPPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSPPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSPPResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSPPResponse*>(
               &_UpdateSPPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateSPPResponse& a, UpdateSPPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSPPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSPPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSPPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSPPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSPPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSPPResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSPPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.UpdateSPPResponse";
  }
  protected:
  explicit UpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.UpdateSPPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class BatchedUpdateSPPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.BatchedUpdateSPPResponse) */ {
 public:
  inline BatchedUpdateSPPResponse() : BatchedUpdateSPPResponse(nullptr) {}
  ~BatchedUpdateSPPResponse() override;
  explicit constexpr BatchedUpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchedUpdateSPPResponse(const BatchedUpdateSPPResponse& from);
  BatchedUpdateSPPResponse(BatchedUpdateSPPResponse&& from) noexcept
    : BatchedUpdateSPPResponse() {
    *this = ::std::move(from);
  }

  inline BatchedUpdateSPPResponse& operator=(const BatchedUpdateSPPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchedUpdateSPPResponse& operator=(BatchedUpdateSPPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchedUpdateSPPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchedUpdateSPPResponse* internal_default_instance() {
    return reinterpret_cast<const BatchedUpdateSPPResponse*>(
               &_BatchedUpdateSPPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BatchedUpdateSPPResponse& a, BatchedUpdateSPPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchedUpdateSPPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchedUpdateSPPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchedUpdateSPPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchedUpdateSPPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchedUpdateSPPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchedUpdateSPPResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchedUpdateSPPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.BatchedUpdateSPPResponse";
  }
  protected:
  explicit BatchedUpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.BatchedUpdateSPPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class QueryAggRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.QueryAggRequest) */ {
 public:
  inline QueryAggRequest() : QueryAggRequest(nullptr) {}
  ~QueryAggRequest() override;
  explicit constexpr QueryAggRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAggRequest(const QueryAggRequest& from);
  QueryAggRequest(QueryAggRequest&& from) noexcept
    : QueryAggRequest() {
    *this = ::std::move(from);
  }

  inline QueryAggRequest& operator=(const QueryAggRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAggRequest& operator=(QueryAggRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAggRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAggRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAggRequest*>(
               &_QueryAggRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryAggRequest& a, QueryAggRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAggRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAggRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAggRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAggRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAggRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryAggRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAggRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.QueryAggRequest";
  }
  protected:
  explicit QueryAggRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggIdFieldNumber = 1,
    kCombinedFilterFieldNumber = 2,
  };
  // string agg_id = 1;
  void clear_agg_id();
  const std::string& agg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agg_id();
  PROTOBUF_NODISCARD std::string* release_agg_id();
  void set_allocated_agg_id(std::string* agg_id);
  private:
  const std::string& _internal_agg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agg_id(const std::string& value);
  std::string* _internal_mutable_agg_id();
  public:

  // .dbquery.CombinedFilter combined_filter = 2;
  bool has_combined_filter() const;
  private:
  bool _internal_has_combined_filter() const;
  public:
  void clear_combined_filter();
  const ::dbquery::CombinedFilter& combined_filter() const;
  PROTOBUF_NODISCARD ::dbquery::CombinedFilter* release_combined_filter();
  ::dbquery::CombinedFilter* mutable_combined_filter();
  void set_allocated_combined_filter(::dbquery::CombinedFilter* combined_filter);
  private:
  const ::dbquery::CombinedFilter& _internal_combined_filter() const;
  ::dbquery::CombinedFilter* _internal_mutable_combined_filter();
  public:
  void unsafe_arena_set_allocated_combined_filter(
      ::dbquery::CombinedFilter* combined_filter);
  ::dbquery::CombinedFilter* unsafe_arena_release_combined_filter();

  // @@protoc_insertion_point(class_scope:dbquery.QueryAggRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agg_id_;
  ::dbquery::CombinedFilter* combined_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class QueryAggResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.QueryAggResponse) */ {
 public:
  inline QueryAggResponse() : QueryAggResponse(nullptr) {}
  ~QueryAggResponse() override;
  explicit constexpr QueryAggResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAggResponse(const QueryAggResponse& from);
  QueryAggResponse(QueryAggResponse&& from) noexcept
    : QueryAggResponse() {
    *this = ::std::move(from);
  }

  inline QueryAggResponse& operator=(const QueryAggResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAggResponse& operator=(QueryAggResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAggResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAggResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAggResponse*>(
               &_QueryAggResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryAggResponse& a, QueryAggResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAggResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAggResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAggResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAggResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAggResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryAggResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAggResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.QueryAggResponse";
  }
  protected:
  explicit QueryAggResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP1FieldNumber = 3,
    kP2FieldNumber = 4,
    kDIFieldNumber = 1,
    kEIFieldNumber = 2,
    kLeng0FieldNumber = 5,
  };
  // repeated bytes p1 = 3;
  int p1_size() const;
  private:
  int _internal_p1_size() const;
  public:
  void clear_p1();
  const std::string& p1(int index) const;
  std::string* mutable_p1(int index);
  void set_p1(int index, const std::string& value);
  void set_p1(int index, std::string&& value);
  void set_p1(int index, const char* value);
  void set_p1(int index, const void* value, size_t size);
  std::string* add_p1();
  void add_p1(const std::string& value);
  void add_p1(std::string&& value);
  void add_p1(const char* value);
  void add_p1(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& p1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_p1();
  private:
  const std::string& _internal_p1(int index) const;
  std::string* _internal_add_p1();
  public:

  // repeated bytes p2 = 4;
  int p2_size() const;
  private:
  int _internal_p2_size() const;
  public:
  void clear_p2();
  const std::string& p2(int index) const;
  std::string* mutable_p2(int index);
  void set_p2(int index, const std::string& value);
  void set_p2(int index, std::string&& value);
  void set_p2(int index, const char* value);
  void set_p2(int index, const void* value, size_t size);
  std::string* add_p2();
  void add_p2(const std::string& value);
  void add_p2(std::string&& value);
  void add_p2(const char* value);
  void add_p2(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& p2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_p2();
  private:
  const std::string& _internal_p2(int index) const;
  std::string* _internal_add_p2();
  public:

  // bytes d_i = 1;
  void clear_d_i();
  const std::string& d_i() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d_i(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d_i();
  PROTOBUF_NODISCARD std::string* release_d_i();
  void set_allocated_d_i(std::string* d_i);
  private:
  const std::string& _internal_d_i() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d_i(const std::string& value);
  std::string* _internal_mutable_d_i();
  public:

  // bytes e_i = 2;
  void clear_e_i();
  const std::string& e_i() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e_i(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e_i();
  PROTOBUF_NODISCARD std::string* release_e_i();
  void set_allocated_e_i(std::string* e_i);
  private:
  const std::string& _internal_e_i() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e_i(const std::string& value);
  std::string* _internal_mutable_e_i();
  public:

  // int32 leng0 = 5;
  void clear_leng0();
  int32_t leng0() const;
  void set_leng0(int32_t value);
  private:
  int32_t _internal_leng0() const;
  void _internal_set_leng0(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.QueryAggResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> p1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> p2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_i_;
  int32_t leng0_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class DEshareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.DEshareRequest) */ {
 public:
  inline DEshareRequest() : DEshareRequest(nullptr) {}
  ~DEshareRequest() override;
  explicit constexpr DEshareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DEshareRequest(const DEshareRequest& from);
  DEshareRequest(DEshareRequest&& from) noexcept
    : DEshareRequest() {
    *this = ::std::move(from);
  }

  inline DEshareRequest& operator=(const DEshareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DEshareRequest& operator=(DEshareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DEshareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DEshareRequest* internal_default_instance() {
    return reinterpret_cast<const DEshareRequest*>(
               &_DEshareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DEshareRequest& a, DEshareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DEshareRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DEshareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DEshareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DEshareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DEshareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DEshareRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEshareRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.DEshareRequest";
  }
  protected:
  explicit DEshareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmFieldNumber = 1,
    kEmFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // bytes dm = 1;
  void clear_dm();
  const std::string& dm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm();
  PROTOBUF_NODISCARD std::string* release_dm();
  void set_allocated_dm(std::string* dm);
  private:
  const std::string& _internal_dm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm(const std::string& value);
  std::string* _internal_mutable_dm();
  public:

  // bytes em = 2;
  void clear_em();
  const std::string& em() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_em(ArgT0&& arg0, ArgT... args);
  std::string* mutable_em();
  PROTOBUF_NODISCARD std::string* release_em();
  void set_allocated_em(std::string* em);
  private:
  const std::string& _internal_em() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_em(const std::string& value);
  std::string* _internal_mutable_em();
  public:

  // string num = 3;
  void clear_num();
  const std::string& num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_num();
  PROTOBUF_NODISCARD std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.DEshareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr em_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class DEshareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.DEshareResponse) */ {
 public:
  inline DEshareResponse() : DEshareResponse(nullptr) {}
  ~DEshareResponse() override;
  explicit constexpr DEshareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DEshareResponse(const DEshareResponse& from);
  DEshareResponse(DEshareResponse&& from) noexcept
    : DEshareResponse() {
    *this = ::std::move(from);
  }

  inline DEshareResponse& operator=(const DEshareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DEshareResponse& operator=(DEshareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DEshareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DEshareResponse* internal_default_instance() {
    return reinterpret_cast<const DEshareResponse*>(
               &_DEshareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DEshareResponse& a, DEshareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DEshareResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DEshareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DEshareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DEshareResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DEshareResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DEshareResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEshareResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.DEshareResponse";
  }
  protected:
  explicit DEshareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDJFieldNumber = 1,
    kEJFieldNumber = 2,
  };
  // bytes d_j = 1;
  void clear_d_j();
  const std::string& d_j() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d_j(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d_j();
  PROTOBUF_NODISCARD std::string* release_d_j();
  void set_allocated_d_j(std::string* d_j);
  private:
  const std::string& _internal_d_j() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d_j(const std::string& value);
  std::string* _internal_mutable_d_j();
  public:

  // bytes e_j = 2;
  void clear_e_j();
  const std::string& e_j() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e_j(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e_j();
  PROTOBUF_NODISCARD std::string* release_e_j();
  void set_allocated_e_j(std::string* e_j);
  private:
  const std::string& _internal_e_j() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e_j(const std::string& value);
  std::string* _internal_mutable_e_j();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.DEshareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_j_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_j_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class ZshareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.ZshareRequest) */ {
 public:
  inline ZshareRequest() : ZshareRequest(nullptr) {}
  ~ZshareRequest() override;
  explicit constexpr ZshareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZshareRequest(const ZshareRequest& from);
  ZshareRequest(ZshareRequest&& from) noexcept
    : ZshareRequest() {
    *this = ::std::move(from);
  }

  inline ZshareRequest& operator=(const ZshareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZshareRequest& operator=(ZshareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZshareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZshareRequest* internal_default_instance() {
    return reinterpret_cast<const ZshareRequest*>(
               &_ZshareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ZshareRequest& a, ZshareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZshareRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZshareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZshareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZshareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZshareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZshareRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZshareRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.ZshareRequest";
  }
  protected:
  explicit ZshareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 1,
    kEFieldNumber = 2,
    kAggIdFieldNumber = 3,
  };
  // bytes d = 1;
  void clear_d();
  const std::string& d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d();
  PROTOBUF_NODISCARD std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // string agg_id = 3;
  void clear_agg_id();
  const std::string& agg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agg_id();
  PROTOBUF_NODISCARD std::string* release_agg_id();
  void set_allocated_agg_id(std::string* agg_id);
  private:
  const std::string& _internal_agg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agg_id(const std::string& value);
  std::string* _internal_mutable_agg_id();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.ZshareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class ZshareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.ZshareResponse) */ {
 public:
  inline ZshareResponse() : ZshareResponse(nullptr) {}
  ~ZshareResponse() override;
  explicit constexpr ZshareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZshareResponse(const ZshareResponse& from);
  ZshareResponse(ZshareResponse&& from) noexcept
    : ZshareResponse() {
    *this = ::std::move(from);
  }

  inline ZshareResponse& operator=(const ZshareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZshareResponse& operator=(ZshareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZshareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZshareResponse* internal_default_instance() {
    return reinterpret_cast<const ZshareResponse*>(
               &_ZshareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ZshareResponse& a, ZshareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ZshareResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZshareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZshareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZshareResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZshareResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZshareResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZshareResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.ZshareResponse";
  }
  protected:
  explicit ZshareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDvIFieldNumber = 1,
    kEvIFieldNumber = 2,
  };
  // bytes dv_i = 1;
  void clear_dv_i();
  const std::string& dv_i() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dv_i(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dv_i();
  PROTOBUF_NODISCARD std::string* release_dv_i();
  void set_allocated_dv_i(std::string* dv_i);
  private:
  const std::string& _internal_dv_i() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dv_i(const std::string& value);
  std::string* _internal_mutable_dv_i();
  public:

  // bytes ev_i = 2;
  void clear_ev_i();
  const std::string& ev_i() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ev_i(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ev_i();
  PROTOBUF_NODISCARD std::string* release_ev_i();
  void set_allocated_ev_i(std::string* ev_i);
  private:
  const std::string& _internal_ev_i() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ev_i(const std::string& value);
  std::string* _internal_mutable_ev_i();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.ZshareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dv_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ev_i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class AggRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.AggRequest) */ {
 public:
  inline AggRequest() : AggRequest(nullptr) {}
  ~AggRequest() override;
  explicit constexpr AggRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggRequest(const AggRequest& from);
  AggRequest(AggRequest&& from) noexcept
    : AggRequest() {
    *this = ::std::move(from);
  }

  inline AggRequest& operator=(const AggRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggRequest& operator=(AggRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggRequest* internal_default_instance() {
    return reinterpret_cast<const AggRequest*>(
               &_AggRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AggRequest& a, AggRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AggRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.AggRequest";
  }
  protected:
  explicit AggRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDvFieldNumber = 1,
    kEvFieldNumber = 2,
  };
  // bytes dv = 1;
  void clear_dv();
  const std::string& dv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dv();
  PROTOBUF_NODISCARD std::string* release_dv();
  void set_allocated_dv(std::string* dv);
  private:
  const std::string& _internal_dv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dv(const std::string& value);
  std::string* _internal_mutable_dv();
  public:

  // bytes ev = 2;
  void clear_ev();
  const std::string& ev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ev();
  PROTOBUF_NODISCARD std::string* release_ev();
  void set_allocated_ev(std::string* ev);
  private:
  const std::string& _internal_ev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ev(const std::string& value);
  std::string* _internal_mutable_ev();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.AggRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class AggResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.AggResponse) */ {
 public:
  inline AggResponse() : AggResponse(nullptr) {}
  ~AggResponse() override;
  explicit constexpr AggResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggResponse(const AggResponse& from);
  AggResponse(AggResponse&& from) noexcept
    : AggResponse() {
    *this = ::std::move(from);
  }

  inline AggResponse& operator=(const AggResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggResponse& operator=(AggResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggResponse* internal_default_instance() {
    return reinterpret_cast<const AggResponse*>(
               &_AggResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AggResponse& a, AggResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AggResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.AggResponse";
  }
  protected:
  explicit AggResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // bytes res = 1;
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_NODISCARD std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.AggResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class BaseFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.BaseFilter) */ {
 public:
  inline BaseFilter() : BaseFilter(nullptr) {}
  ~BaseFilter() override;
  explicit constexpr BaseFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseFilter(const BaseFilter& from);
  BaseFilter(BaseFilter&& from) noexcept
    : BaseFilter() {
    *this = ::std::move(from);
  }

  inline BaseFilter& operator=(const BaseFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseFilter& operator=(BaseFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseFilter* internal_default_instance() {
    return reinterpret_cast<const BaseFilter*>(
               &_BaseFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BaseFilter& a, BaseFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.BaseFilter";
  }
  protected:
  explicit BaseFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 5,
    kS2FieldNumber = 6,
    kIdFieldNumber = 1,
    kKey0FieldNumber = 2,
    kKey1FieldNumber = 3,
    kIsPointFieldNumber = 4,
  };
  // repeated int32 s1 = 5;
  int s1_size() const;
  private:
  int _internal_s1_size() const;
  public:
  void clear_s1();
  private:
  int32_t _internal_s1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_s1() const;
  void _internal_add_s1(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_s1();
  public:
  int32_t s1(int index) const;
  void set_s1(int index, int32_t value);
  void add_s1(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      s1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_s1();

  // repeated int32 s2 = 6;
  int s2_size() const;
  private:
  int _internal_s2_size() const;
  public:
  void clear_s2();
  private:
  int32_t _internal_s2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_s2() const;
  void _internal_add_s2(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_s2();
  public:
  int32_t s2(int index) const;
  void set_s2(int index, int32_t value);
  void add_s2(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      s2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_s2();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes key0 = 2;
  void clear_key0();
  const std::string& key0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key0();
  PROTOBUF_NODISCARD std::string* release_key0();
  void set_allocated_key0(std::string* key0);
  private:
  const std::string& _internal_key0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key0(const std::string& value);
  std::string* _internal_mutable_key0();
  public:

  // bytes key1 = 3;
  void clear_key1();
  const std::string& key1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key1();
  PROTOBUF_NODISCARD std::string* release_key1();
  void set_allocated_key1(std::string* key1);
  private:
  const std::string& _internal_key1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key1(const std::string& value);
  std::string* _internal_mutable_key1();
  public:

  // bool is_point = 4;
  void clear_is_point();
  bool is_point() const;
  void set_is_point(bool value);
  private:
  bool _internal_is_point() const;
  void _internal_set_is_point(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.BaseFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > s1_;
  mutable std::atomic<int> _s1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > s2_;
  mutable std::atomic<int> _s2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key1_;
  bool is_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class CombinedFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.CombinedFilter) */ {
 public:
  inline CombinedFilter() : CombinedFilter(nullptr) {}
  ~CombinedFilter() override;
  explicit constexpr CombinedFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CombinedFilter(const CombinedFilter& from);
  CombinedFilter(CombinedFilter&& from) noexcept
    : CombinedFilter() {
    *this = ::std::move(from);
  }

  inline CombinedFilter& operator=(const CombinedFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombinedFilter& operator=(CombinedFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CombinedFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CombinedFilter* internal_default_instance() {
    return reinterpret_cast<const CombinedFilter*>(
               &_CombinedFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CombinedFilter& a, CombinedFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CombinedFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CombinedFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CombinedFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CombinedFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CombinedFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CombinedFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CombinedFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.CombinedFilter";
  }
  protected:
  explicit CombinedFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFiltersFieldNumber = 1,
    kOpIsAndFieldNumber = 2,
  };
  // repeated .dbquery.BaseFilter base_filters = 1;
  int base_filters_size() const;
  private:
  int _internal_base_filters_size() const;
  public:
  void clear_base_filters();
  ::dbquery::BaseFilter* mutable_base_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::BaseFilter >*
      mutable_base_filters();
  private:
  const ::dbquery::BaseFilter& _internal_base_filters(int index) const;
  ::dbquery::BaseFilter* _internal_add_base_filters();
  public:
  const ::dbquery::BaseFilter& base_filters(int index) const;
  ::dbquery::BaseFilter* add_base_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::BaseFilter >&
      base_filters() const;

  // bool op_is_and = 2;
  void clear_op_is_and();
  bool op_is_and() const;
  void set_op_is_and(bool value);
  private:
  bool _internal_op_is_and() const;
  void _internal_set_op_is_and(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.CombinedFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::BaseFilter > base_filters_;
  bool op_is_and_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitSystemRequest

// bytes key = 1;
inline void InitSystemRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& InitSystemRequest::key() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSystemRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitSystemRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitSystemRequest.key)
}
inline std::string* InitSystemRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dbquery.InitSystemRequest.key)
  return _s;
}
inline const std::string& InitSystemRequest::_internal_key() const {
  return key_.Get();
}
inline void InitSystemRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitSystemRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitSystemRequest::release_key() {
  // @@protoc_insertion_point(field_release:dbquery.InitSystemRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitSystemRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitSystemRequest.key)
}

// -------------------------------------------------------------------

// InitSystemResponse

// bytes result = 1;
inline void InitSystemResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& InitSystemResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSystemResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitSystemResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitSystemResponse.result)
}
inline std::string* InitSystemResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.InitSystemResponse.result)
  return _s;
}
inline const std::string& InitSystemResponse::_internal_result() const {
  return result_.Get();
}
inline void InitSystemResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitSystemResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitSystemResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.InitSystemResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitSystemResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitSystemResponse.result)
}

// -------------------------------------------------------------------

// MultRequest

// bytes shares0 = 1;
inline void MultRequest::clear_shares0() {
  shares0_.ClearToEmpty();
}
inline const std::string& MultRequest::shares0() const {
  // @@protoc_insertion_point(field_get:dbquery.MultRequest.shares0)
  return _internal_shares0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultRequest::set_shares0(ArgT0&& arg0, ArgT... args) {
 
 shares0_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.MultRequest.shares0)
}
inline std::string* MultRequest::mutable_shares0() {
  std::string* _s = _internal_mutable_shares0();
  // @@protoc_insertion_point(field_mutable:dbquery.MultRequest.shares0)
  return _s;
}
inline const std::string& MultRequest::_internal_shares0() const {
  return shares0_.Get();
}
inline void MultRequest::_internal_set_shares0(const std::string& value) {
  
  shares0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MultRequest::_internal_mutable_shares0() {
  
  return shares0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MultRequest::release_shares0() {
  // @@protoc_insertion_point(field_release:dbquery.MultRequest.shares0)
  return shares0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MultRequest::set_allocated_shares0(std::string* shares0) {
  if (shares0 != nullptr) {
    
  } else {
    
  }
  shares0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shares0,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shares0_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shares0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.MultRequest.shares0)
}

// bytes shares1 = 2;
inline void MultRequest::clear_shares1() {
  shares1_.ClearToEmpty();
}
inline const std::string& MultRequest::shares1() const {
  // @@protoc_insertion_point(field_get:dbquery.MultRequest.shares1)
  return _internal_shares1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultRequest::set_shares1(ArgT0&& arg0, ArgT... args) {
 
 shares1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.MultRequest.shares1)
}
inline std::string* MultRequest::mutable_shares1() {
  std::string* _s = _internal_mutable_shares1();
  // @@protoc_insertion_point(field_mutable:dbquery.MultRequest.shares1)
  return _s;
}
inline const std::string& MultRequest::_internal_shares1() const {
  return shares1_.Get();
}
inline void MultRequest::_internal_set_shares1(const std::string& value) {
  
  shares1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MultRequest::_internal_mutable_shares1() {
  
  return shares1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MultRequest::release_shares1() {
  // @@protoc_insertion_point(field_release:dbquery.MultRequest.shares1)
  return shares1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MultRequest::set_allocated_shares1(std::string* shares1) {
  if (shares1 != nullptr) {
    
  } else {
    
  }
  shares1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shares1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shares1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shares1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.MultRequest.shares1)
}

// -------------------------------------------------------------------

// MultResponse

// bytes res = 1;
inline void MultResponse::clear_res() {
  res_.ClearToEmpty();
}
inline const std::string& MultResponse::res() const {
  // @@protoc_insertion_point(field_get:dbquery.MultResponse.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultResponse::set_res(ArgT0&& arg0, ArgT... args) {
 
 res_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.MultResponse.res)
}
inline std::string* MultResponse::mutable_res() {
  std::string* _s = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:dbquery.MultResponse.res)
  return _s;
}
inline const std::string& MultResponse::_internal_res() const {
  return res_.Get();
}
inline void MultResponse::_internal_set_res(const std::string& value) {
  
  res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MultResponse::_internal_mutable_res() {
  
  return res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MultResponse::release_res() {
  // @@protoc_insertion_point(field_release:dbquery.MultResponse.res)
  return res_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MultResponse::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.MultResponse.res)
}

// -------------------------------------------------------------------

// InitListRequest

// bytes id = 1;
inline void InitListRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& InitListRequest::id() const {
  // @@protoc_insertion_point(field_get:dbquery.InitListRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitListRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitListRequest.id)
}
inline std::string* InitListRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dbquery.InitListRequest.id)
  return _s;
}
inline const std::string& InitListRequest::_internal_id() const {
  return id_.Get();
}
inline void InitListRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitListRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitListRequest::release_id() {
  // @@protoc_insertion_point(field_release:dbquery.InitListRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitListRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitListRequest.id)
}

// uint32 window_size = 2;
inline void InitListRequest::clear_window_size() {
  window_size_ = 0u;
}
inline uint32_t InitListRequest::_internal_window_size() const {
  return window_size_;
}
inline uint32_t InitListRequest::window_size() const {
  // @@protoc_insertion_point(field_get:dbquery.InitListRequest.window_size)
  return _internal_window_size();
}
inline void InitListRequest::_internal_set_window_size(uint32_t value) {
  
  window_size_ = value;
}
inline void InitListRequest::set_window_size(uint32_t value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:dbquery.InitListRequest.window_size)
}

// -------------------------------------------------------------------

// InitListResponse

// bytes result = 1;
inline void InitListResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& InitListResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.InitListResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitListResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitListResponse.result)
}
inline std::string* InitListResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.InitListResponse.result)
  return _s;
}
inline const std::string& InitListResponse::_internal_result() const {
  return result_.Get();
}
inline void InitListResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitListResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitListResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.InitListResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitListResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitListResponse.result)
}

// -------------------------------------------------------------------

// UpdateListRequest

// bytes id = 1;
inline void UpdateListRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateListRequest::id() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateListRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateListRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateListRequest.id)
}
inline std::string* UpdateListRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateListRequest.id)
  return _s;
}
inline const std::string& UpdateListRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateListRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateListRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateListRequest::release_id() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateListRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateListRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateListRequest.id)
}

// uint32 val = 2;
inline void UpdateListRequest::clear_val() {
  val_ = 0u;
}
inline uint32_t UpdateListRequest::_internal_val() const {
  return val_;
}
inline uint32_t UpdateListRequest::val() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateListRequest.val)
  return _internal_val();
}
inline void UpdateListRequest::_internal_set_val(uint32_t value) {
  
  val_ = value;
}
inline void UpdateListRequest::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:dbquery.UpdateListRequest.val)
}

// bytes share0 = 3;
inline void UpdateListRequest::clear_share0() {
  share0_.ClearToEmpty();
}
inline const std::string& UpdateListRequest::share0() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateListRequest.share0)
  return _internal_share0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateListRequest::set_share0(ArgT0&& arg0, ArgT... args) {
 
 share0_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateListRequest.share0)
}
inline std::string* UpdateListRequest::mutable_share0() {
  std::string* _s = _internal_mutable_share0();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateListRequest.share0)
  return _s;
}
inline const std::string& UpdateListRequest::_internal_share0() const {
  return share0_.Get();
}
inline void UpdateListRequest::_internal_set_share0(const std::string& value) {
  
  share0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateListRequest::_internal_mutable_share0() {
  
  return share0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateListRequest::release_share0() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateListRequest.share0)
  return share0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateListRequest::set_allocated_share0(std::string* share0) {
  if (share0 != nullptr) {
    
  } else {
    
  }
  share0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), share0,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (share0_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    share0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateListRequest.share0)
}

// -------------------------------------------------------------------

// BatchedUpdateListRequest

// repeated .dbquery.UpdateListRequest updates = 1;
inline int BatchedUpdateListRequest::_internal_updates_size() const {
  return updates_.size();
}
inline int BatchedUpdateListRequest::updates_size() const {
  return _internal_updates_size();
}
inline void BatchedUpdateListRequest::clear_updates() {
  updates_.Clear();
}
inline ::dbquery::UpdateListRequest* BatchedUpdateListRequest::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.BatchedUpdateListRequest.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateListRequest >*
BatchedUpdateListRequest::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.BatchedUpdateListRequest.updates)
  return &updates_;
}
inline const ::dbquery::UpdateListRequest& BatchedUpdateListRequest::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::dbquery::UpdateListRequest& BatchedUpdateListRequest::updates(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.BatchedUpdateListRequest.updates)
  return _internal_updates(index);
}
inline ::dbquery::UpdateListRequest* BatchedUpdateListRequest::_internal_add_updates() {
  return updates_.Add();
}
inline ::dbquery::UpdateListRequest* BatchedUpdateListRequest::add_updates() {
  ::dbquery::UpdateListRequest* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:dbquery.BatchedUpdateListRequest.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateListRequest >&
BatchedUpdateListRequest::updates() const {
  // @@protoc_insertion_point(field_list:dbquery.BatchedUpdateListRequest.updates)
  return updates_;
}

// -------------------------------------------------------------------

// UpdateListResponse

// bytes result = 1;
inline void UpdateListResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& UpdateListResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateListResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateListResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateListResponse.result)
}
inline std::string* UpdateListResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateListResponse.result)
  return _s;
}
inline const std::string& UpdateListResponse::_internal_result() const {
  return result_.Get();
}
inline void UpdateListResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateListResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateListResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateListResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateListResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateListResponse.result)
}

// -------------------------------------------------------------------

// BatchedUpdateListResponse

// bytes result = 1;
inline void BatchedUpdateListResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& BatchedUpdateListResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.BatchedUpdateListResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchedUpdateListResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.BatchedUpdateListResponse.result)
}
inline std::string* BatchedUpdateListResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.BatchedUpdateListResponse.result)
  return _s;
}
inline const std::string& BatchedUpdateListResponse::_internal_result() const {
  return result_.Get();
}
inline void BatchedUpdateListResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatchedUpdateListResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatchedUpdateListResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.BatchedUpdateListResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatchedUpdateListResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.BatchedUpdateListResponse.result)
}

// -------------------------------------------------------------------

// InitSPPRequest

// bytes id = 1;
inline void InitSPPRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& InitSPPRequest::id() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSPPRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitSPPRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitSPPRequest.id)
}
inline std::string* InitSPPRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dbquery.InitSPPRequest.id)
  return _s;
}
inline const std::string& InitSPPRequest::_internal_id() const {
  return id_.Get();
}
inline void InitSPPRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitSPPRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitSPPRequest::release_id() {
  // @@protoc_insertion_point(field_release:dbquery.InitSPPRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitSPPRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitSPPRequest.id)
}

// uint32 window_size = 2;
inline void InitSPPRequest::clear_window_size() {
  window_size_ = 0u;
}
inline uint32_t InitSPPRequest::_internal_window_size() const {
  return window_size_;
}
inline uint32_t InitSPPRequest::window_size() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSPPRequest.window_size)
  return _internal_window_size();
}
inline void InitSPPRequest::_internal_set_window_size(uint32_t value) {
  
  window_size_ = value;
}
inline void InitSPPRequest::set_window_size(uint32_t value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:dbquery.InitSPPRequest.window_size)
}

// uint32 num_buckets = 3;
inline void InitSPPRequest::clear_num_buckets() {
  num_buckets_ = 0u;
}
inline uint32_t InitSPPRequest::_internal_num_buckets() const {
  return num_buckets_;
}
inline uint32_t InitSPPRequest::num_buckets() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSPPRequest.num_buckets)
  return _internal_num_buckets();
}
inline void InitSPPRequest::_internal_set_num_buckets(uint32_t value) {
  
  num_buckets_ = value;
}
inline void InitSPPRequest::set_num_buckets(uint32_t value) {
  _internal_set_num_buckets(value);
  // @@protoc_insertion_point(field_set:dbquery.InitSPPRequest.num_buckets)
}

// bool malicious = 4;
inline void InitSPPRequest::clear_malicious() {
  malicious_ = false;
}
inline bool InitSPPRequest::_internal_malicious() const {
  return malicious_;
}
inline bool InitSPPRequest::malicious() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSPPRequest.malicious)
  return _internal_malicious();
}
inline void InitSPPRequest::_internal_set_malicious(bool value) {
  
  malicious_ = value;
}
inline void InitSPPRequest::set_malicious(bool value) {
  _internal_set_malicious(value);
  // @@protoc_insertion_point(field_set:dbquery.InitSPPRequest.malicious)
}

// -------------------------------------------------------------------

// InitSPPResponse

// bytes result = 1;
inline void InitSPPResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& InitSPPResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.InitSPPResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitSPPResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.InitSPPResponse.result)
}
inline std::string* InitSPPResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.InitSPPResponse.result)
  return _s;
}
inline const std::string& InitSPPResponse::_internal_result() const {
  return result_.Get();
}
inline void InitSPPResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitSPPResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitSPPResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.InitSPPResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitSPPResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.InitSPPResponse.result)
}

// -------------------------------------------------------------------

// UpdateSPPRequest

// bytes id = 1;
inline void UpdateSPPRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateSPPRequest::id() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.id)
}
inline std::string* UpdateSPPRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPRequest.id)
  return _s;
}
inline const std::string& UpdateSPPRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateSPPRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::release_id() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPRequest.id)
}

// uint32 val = 2;
inline void UpdateSPPRequest::clear_val() {
  val_ = 0u;
}
inline uint32_t UpdateSPPRequest::_internal_val() const {
  return val_;
}
inline uint32_t UpdateSPPRequest::val() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.val)
  return _internal_val();
}
inline void UpdateSPPRequest::_internal_set_val(uint32_t value) {
  
  val_ = value;
}
inline void UpdateSPPRequest::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.val)
}

// bytes data0 = 3;
inline void UpdateSPPRequest::clear_data0() {
  data0_.ClearToEmpty();
}
inline const std::string& UpdateSPPRequest::data0() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.data0)
  return _internal_data0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPRequest::set_data0(ArgT0&& arg0, ArgT... args) {
 
 data0_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.data0)
}
inline std::string* UpdateSPPRequest::mutable_data0() {
  std::string* _s = _internal_mutable_data0();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPRequest.data0)
  return _s;
}
inline const std::string& UpdateSPPRequest::_internal_data0() const {
  return data0_.Get();
}
inline void UpdateSPPRequest::_internal_set_data0(const std::string& value) {
  
  data0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::_internal_mutable_data0() {
  
  return data0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::release_data0() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPRequest.data0)
  return data0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPRequest::set_allocated_data0(std::string* data0) {
  if (data0 != nullptr) {
    
  } else {
    
  }
  data0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data0,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data0_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPRequest.data0)
}

// bytes a = 4;
inline void UpdateSPPRequest::clear_a() {
  a_.ClearToEmpty();
}
inline const std::string& UpdateSPPRequest::a() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPRequest::set_a(ArgT0&& arg0, ArgT... args) {
 
 a_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.a)
}
inline std::string* UpdateSPPRequest::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPRequest.a)
  return _s;
}
inline const std::string& UpdateSPPRequest::_internal_a() const {
  return a_.Get();
}
inline void UpdateSPPRequest::_internal_set_a(const std::string& value) {
  
  a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::_internal_mutable_a() {
  
  return a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::release_a() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPRequest.a)
  return a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPRequest::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPRequest.a)
}

// bytes b = 5;
inline void UpdateSPPRequest::clear_b() {
  b_.ClearToEmpty();
}
inline const std::string& UpdateSPPRequest::b() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPRequest::set_b(ArgT0&& arg0, ArgT... args) {
 
 b_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.b)
}
inline std::string* UpdateSPPRequest::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPRequest.b)
  return _s;
}
inline const std::string& UpdateSPPRequest::_internal_b() const {
  return b_.Get();
}
inline void UpdateSPPRequest::_internal_set_b(const std::string& value) {
  
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::_internal_mutable_b() {
  
  return b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::release_b() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPRequest.b)
  return b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPRequest::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    
  } else {
    
  }
  b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPRequest.b)
}

// bytes ab = 6;
inline void UpdateSPPRequest::clear_ab() {
  ab_.ClearToEmpty();
}
inline const std::string& UpdateSPPRequest::ab() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPRequest.ab)
  return _internal_ab();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPRequest::set_ab(ArgT0&& arg0, ArgT... args) {
 
 ab_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPRequest.ab)
}
inline std::string* UpdateSPPRequest::mutable_ab() {
  std::string* _s = _internal_mutable_ab();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPRequest.ab)
  return _s;
}
inline const std::string& UpdateSPPRequest::_internal_ab() const {
  return ab_.Get();
}
inline void UpdateSPPRequest::_internal_set_ab(const std::string& value) {
  
  ab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::_internal_mutable_ab() {
  
  return ab_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPRequest::release_ab() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPRequest.ab)
  return ab_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPRequest::set_allocated_ab(std::string* ab) {
  if (ab != nullptr) {
    
  } else {
    
  }
  ab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ab,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ab_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPRequest.ab)
}

// -------------------------------------------------------------------

// BatchedUpdateSPPRequest

// repeated .dbquery.UpdateSPPRequest updates = 1;
inline int BatchedUpdateSPPRequest::_internal_updates_size() const {
  return updates_.size();
}
inline int BatchedUpdateSPPRequest::updates_size() const {
  return _internal_updates_size();
}
inline void BatchedUpdateSPPRequest::clear_updates() {
  updates_.Clear();
}
inline ::dbquery::UpdateSPPRequest* BatchedUpdateSPPRequest::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.BatchedUpdateSPPRequest.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateSPPRequest >*
BatchedUpdateSPPRequest::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.BatchedUpdateSPPRequest.updates)
  return &updates_;
}
inline const ::dbquery::UpdateSPPRequest& BatchedUpdateSPPRequest::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::dbquery::UpdateSPPRequest& BatchedUpdateSPPRequest::updates(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.BatchedUpdateSPPRequest.updates)
  return _internal_updates(index);
}
inline ::dbquery::UpdateSPPRequest* BatchedUpdateSPPRequest::_internal_add_updates() {
  return updates_.Add();
}
inline ::dbquery::UpdateSPPRequest* BatchedUpdateSPPRequest::add_updates() {
  ::dbquery::UpdateSPPRequest* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:dbquery.BatchedUpdateSPPRequest.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::UpdateSPPRequest >&
BatchedUpdateSPPRequest::updates() const {
  // @@protoc_insertion_point(field_list:dbquery.BatchedUpdateSPPRequest.updates)
  return updates_;
}

// -------------------------------------------------------------------

// UpdateSPPResponse

// bytes result = 1;
inline void UpdateSPPResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& UpdateSPPResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.UpdateSPPResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSPPResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.UpdateSPPResponse.result)
}
inline std::string* UpdateSPPResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.UpdateSPPResponse.result)
  return _s;
}
inline const std::string& UpdateSPPResponse::_internal_result() const {
  return result_.Get();
}
inline void UpdateSPPResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateSPPResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateSPPResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.UpdateSPPResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateSPPResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.UpdateSPPResponse.result)
}

// -------------------------------------------------------------------

// BatchedUpdateSPPResponse

// bytes result = 1;
inline void BatchedUpdateSPPResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& BatchedUpdateSPPResponse::result() const {
  // @@protoc_insertion_point(field_get:dbquery.BatchedUpdateSPPResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchedUpdateSPPResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.BatchedUpdateSPPResponse.result)
}
inline std::string* BatchedUpdateSPPResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:dbquery.BatchedUpdateSPPResponse.result)
  return _s;
}
inline const std::string& BatchedUpdateSPPResponse::_internal_result() const {
  return result_.Get();
}
inline void BatchedUpdateSPPResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatchedUpdateSPPResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatchedUpdateSPPResponse::release_result() {
  // @@protoc_insertion_point(field_release:dbquery.BatchedUpdateSPPResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatchedUpdateSPPResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.BatchedUpdateSPPResponse.result)
}

// -------------------------------------------------------------------

// QueryAggRequest

// string agg_id = 1;
inline void QueryAggRequest::clear_agg_id() {
  agg_id_.ClearToEmpty();
}
inline const std::string& QueryAggRequest::agg_id() const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggRequest.agg_id)
  return _internal_agg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAggRequest::set_agg_id(ArgT0&& arg0, ArgT... args) {
 
 agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.QueryAggRequest.agg_id)
}
inline std::string* QueryAggRequest::mutable_agg_id() {
  std::string* _s = _internal_mutable_agg_id();
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggRequest.agg_id)
  return _s;
}
inline const std::string& QueryAggRequest::_internal_agg_id() const {
  return agg_id_.Get();
}
inline void QueryAggRequest::_internal_set_agg_id(const std::string& value) {
  
  agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryAggRequest::_internal_mutable_agg_id() {
  
  return agg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryAggRequest::release_agg_id() {
  // @@protoc_insertion_point(field_release:dbquery.QueryAggRequest.agg_id)
  return agg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryAggRequest::set_allocated_agg_id(std::string* agg_id) {
  if (agg_id != nullptr) {
    
  } else {
    
  }
  agg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agg_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (agg_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.QueryAggRequest.agg_id)
}

// .dbquery.CombinedFilter combined_filter = 2;
inline bool QueryAggRequest::_internal_has_combined_filter() const {
  return this != internal_default_instance() && combined_filter_ != nullptr;
}
inline bool QueryAggRequest::has_combined_filter() const {
  return _internal_has_combined_filter();
}
inline void QueryAggRequest::clear_combined_filter() {
  if (GetArenaForAllocation() == nullptr && combined_filter_ != nullptr) {
    delete combined_filter_;
  }
  combined_filter_ = nullptr;
}
inline const ::dbquery::CombinedFilter& QueryAggRequest::_internal_combined_filter() const {
  const ::dbquery::CombinedFilter* p = combined_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::dbquery::CombinedFilter&>(
      ::dbquery::_CombinedFilter_default_instance_);
}
inline const ::dbquery::CombinedFilter& QueryAggRequest::combined_filter() const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggRequest.combined_filter)
  return _internal_combined_filter();
}
inline void QueryAggRequest::unsafe_arena_set_allocated_combined_filter(
    ::dbquery::CombinedFilter* combined_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(combined_filter_);
  }
  combined_filter_ = combined_filter;
  if (combined_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dbquery.QueryAggRequest.combined_filter)
}
inline ::dbquery::CombinedFilter* QueryAggRequest::release_combined_filter() {
  
  ::dbquery::CombinedFilter* temp = combined_filter_;
  combined_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dbquery::CombinedFilter* QueryAggRequest::unsafe_arena_release_combined_filter() {
  // @@protoc_insertion_point(field_release:dbquery.QueryAggRequest.combined_filter)
  
  ::dbquery::CombinedFilter* temp = combined_filter_;
  combined_filter_ = nullptr;
  return temp;
}
inline ::dbquery::CombinedFilter* QueryAggRequest::_internal_mutable_combined_filter() {
  
  if (combined_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::dbquery::CombinedFilter>(GetArenaForAllocation());
    combined_filter_ = p;
  }
  return combined_filter_;
}
inline ::dbquery::CombinedFilter* QueryAggRequest::mutable_combined_filter() {
  ::dbquery::CombinedFilter* _msg = _internal_mutable_combined_filter();
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggRequest.combined_filter)
  return _msg;
}
inline void QueryAggRequest::set_allocated_combined_filter(::dbquery::CombinedFilter* combined_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete combined_filter_;
  }
  if (combined_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dbquery::CombinedFilter>::GetOwningArena(combined_filter);
    if (message_arena != submessage_arena) {
      combined_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combined_filter, submessage_arena);
    }
    
  } else {
    
  }
  combined_filter_ = combined_filter;
  // @@protoc_insertion_point(field_set_allocated:dbquery.QueryAggRequest.combined_filter)
}

// -------------------------------------------------------------------

// QueryAggResponse

// bytes d_i = 1;
inline void QueryAggResponse::clear_d_i() {
  d_i_.ClearToEmpty();
}
inline const std::string& QueryAggResponse::d_i() const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggResponse.d_i)
  return _internal_d_i();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAggResponse::set_d_i(ArgT0&& arg0, ArgT... args) {
 
 d_i_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.d_i)
}
inline std::string* QueryAggResponse::mutable_d_i() {
  std::string* _s = _internal_mutable_d_i();
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggResponse.d_i)
  return _s;
}
inline const std::string& QueryAggResponse::_internal_d_i() const {
  return d_i_.Get();
}
inline void QueryAggResponse::_internal_set_d_i(const std::string& value) {
  
  d_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryAggResponse::_internal_mutable_d_i() {
  
  return d_i_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryAggResponse::release_d_i() {
  // @@protoc_insertion_point(field_release:dbquery.QueryAggResponse.d_i)
  return d_i_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryAggResponse::set_allocated_d_i(std::string* d_i) {
  if (d_i != nullptr) {
    
  } else {
    
  }
  d_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_i,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (d_i_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    d_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.QueryAggResponse.d_i)
}

// bytes e_i = 2;
inline void QueryAggResponse::clear_e_i() {
  e_i_.ClearToEmpty();
}
inline const std::string& QueryAggResponse::e_i() const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggResponse.e_i)
  return _internal_e_i();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAggResponse::set_e_i(ArgT0&& arg0, ArgT... args) {
 
 e_i_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.e_i)
}
inline std::string* QueryAggResponse::mutable_e_i() {
  std::string* _s = _internal_mutable_e_i();
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggResponse.e_i)
  return _s;
}
inline const std::string& QueryAggResponse::_internal_e_i() const {
  return e_i_.Get();
}
inline void QueryAggResponse::_internal_set_e_i(const std::string& value) {
  
  e_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryAggResponse::_internal_mutable_e_i() {
  
  return e_i_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryAggResponse::release_e_i() {
  // @@protoc_insertion_point(field_release:dbquery.QueryAggResponse.e_i)
  return e_i_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryAggResponse::set_allocated_e_i(std::string* e_i) {
  if (e_i != nullptr) {
    
  } else {
    
  }
  e_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e_i,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_i_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.QueryAggResponse.e_i)
}

// repeated bytes p1 = 3;
inline int QueryAggResponse::_internal_p1_size() const {
  return p1_.size();
}
inline int QueryAggResponse::p1_size() const {
  return _internal_p1_size();
}
inline void QueryAggResponse::clear_p1() {
  p1_.Clear();
}
inline std::string* QueryAggResponse::add_p1() {
  std::string* _s = _internal_add_p1();
  // @@protoc_insertion_point(field_add_mutable:dbquery.QueryAggResponse.p1)
  return _s;
}
inline const std::string& QueryAggResponse::_internal_p1(int index) const {
  return p1_.Get(index);
}
inline const std::string& QueryAggResponse::p1(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggResponse.p1)
  return _internal_p1(index);
}
inline std::string* QueryAggResponse::mutable_p1(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggResponse.p1)
  return p1_.Mutable(index);
}
inline void QueryAggResponse::set_p1(int index, const std::string& value) {
  p1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::set_p1(int index, std::string&& value) {
  p1_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::set_p1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  p1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::set_p1(int index, const void* value, size_t size) {
  p1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbquery.QueryAggResponse.p1)
}
inline std::string* QueryAggResponse::_internal_add_p1() {
  return p1_.Add();
}
inline void QueryAggResponse::add_p1(const std::string& value) {
  p1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::add_p1(std::string&& value) {
  p1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::add_p1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  p1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dbquery.QueryAggResponse.p1)
}
inline void QueryAggResponse::add_p1(const void* value, size_t size) {
  p1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dbquery.QueryAggResponse.p1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryAggResponse::p1() const {
  // @@protoc_insertion_point(field_list:dbquery.QueryAggResponse.p1)
  return p1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryAggResponse::mutable_p1() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.QueryAggResponse.p1)
  return &p1_;
}

// repeated bytes p2 = 4;
inline int QueryAggResponse::_internal_p2_size() const {
  return p2_.size();
}
inline int QueryAggResponse::p2_size() const {
  return _internal_p2_size();
}
inline void QueryAggResponse::clear_p2() {
  p2_.Clear();
}
inline std::string* QueryAggResponse::add_p2() {
  std::string* _s = _internal_add_p2();
  // @@protoc_insertion_point(field_add_mutable:dbquery.QueryAggResponse.p2)
  return _s;
}
inline const std::string& QueryAggResponse::_internal_p2(int index) const {
  return p2_.Get(index);
}
inline const std::string& QueryAggResponse::p2(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggResponse.p2)
  return _internal_p2(index);
}
inline std::string* QueryAggResponse::mutable_p2(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.QueryAggResponse.p2)
  return p2_.Mutable(index);
}
inline void QueryAggResponse::set_p2(int index, const std::string& value) {
  p2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::set_p2(int index, std::string&& value) {
  p2_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::set_p2(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  p2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::set_p2(int index, const void* value, size_t size) {
  p2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbquery.QueryAggResponse.p2)
}
inline std::string* QueryAggResponse::_internal_add_p2() {
  return p2_.Add();
}
inline void QueryAggResponse::add_p2(const std::string& value) {
  p2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::add_p2(std::string&& value) {
  p2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::add_p2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  p2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dbquery.QueryAggResponse.p2)
}
inline void QueryAggResponse::add_p2(const void* value, size_t size) {
  p2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dbquery.QueryAggResponse.p2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryAggResponse::p2() const {
  // @@protoc_insertion_point(field_list:dbquery.QueryAggResponse.p2)
  return p2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryAggResponse::mutable_p2() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.QueryAggResponse.p2)
  return &p2_;
}

// int32 leng0 = 5;
inline void QueryAggResponse::clear_leng0() {
  leng0_ = 0;
}
inline int32_t QueryAggResponse::_internal_leng0() const {
  return leng0_;
}
inline int32_t QueryAggResponse::leng0() const {
  // @@protoc_insertion_point(field_get:dbquery.QueryAggResponse.leng0)
  return _internal_leng0();
}
inline void QueryAggResponse::_internal_set_leng0(int32_t value) {
  
  leng0_ = value;
}
inline void QueryAggResponse::set_leng0(int32_t value) {
  _internal_set_leng0(value);
  // @@protoc_insertion_point(field_set:dbquery.QueryAggResponse.leng0)
}

// -------------------------------------------------------------------

// DEshareRequest

// bytes dm = 1;
inline void DEshareRequest::clear_dm() {
  dm_.ClearToEmpty();
}
inline const std::string& DEshareRequest::dm() const {
  // @@protoc_insertion_point(field_get:dbquery.DEshareRequest.dm)
  return _internal_dm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEshareRequest::set_dm(ArgT0&& arg0, ArgT... args) {
 
 dm_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.DEshareRequest.dm)
}
inline std::string* DEshareRequest::mutable_dm() {
  std::string* _s = _internal_mutable_dm();
  // @@protoc_insertion_point(field_mutable:dbquery.DEshareRequest.dm)
  return _s;
}
inline const std::string& DEshareRequest::_internal_dm() const {
  return dm_.Get();
}
inline void DEshareRequest::_internal_set_dm(const std::string& value) {
  
  dm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DEshareRequest::_internal_mutable_dm() {
  
  return dm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DEshareRequest::release_dm() {
  // @@protoc_insertion_point(field_release:dbquery.DEshareRequest.dm)
  return dm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DEshareRequest::set_allocated_dm(std::string* dm) {
  if (dm != nullptr) {
    
  } else {
    
  }
  dm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.DEshareRequest.dm)
}

// bytes em = 2;
inline void DEshareRequest::clear_em() {
  em_.ClearToEmpty();
}
inline const std::string& DEshareRequest::em() const {
  // @@protoc_insertion_point(field_get:dbquery.DEshareRequest.em)
  return _internal_em();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEshareRequest::set_em(ArgT0&& arg0, ArgT... args) {
 
 em_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.DEshareRequest.em)
}
inline std::string* DEshareRequest::mutable_em() {
  std::string* _s = _internal_mutable_em();
  // @@protoc_insertion_point(field_mutable:dbquery.DEshareRequest.em)
  return _s;
}
inline const std::string& DEshareRequest::_internal_em() const {
  return em_.Get();
}
inline void DEshareRequest::_internal_set_em(const std::string& value) {
  
  em_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DEshareRequest::_internal_mutable_em() {
  
  return em_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DEshareRequest::release_em() {
  // @@protoc_insertion_point(field_release:dbquery.DEshareRequest.em)
  return em_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DEshareRequest::set_allocated_em(std::string* em) {
  if (em != nullptr) {
    
  } else {
    
  }
  em_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), em,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (em_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    em_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.DEshareRequest.em)
}

// string num = 3;
inline void DEshareRequest::clear_num() {
  num_.ClearToEmpty();
}
inline const std::string& DEshareRequest::num() const {
  // @@protoc_insertion_point(field_get:dbquery.DEshareRequest.num)
  return _internal_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEshareRequest::set_num(ArgT0&& arg0, ArgT... args) {
 
 num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.DEshareRequest.num)
}
inline std::string* DEshareRequest::mutable_num() {
  std::string* _s = _internal_mutable_num();
  // @@protoc_insertion_point(field_mutable:dbquery.DEshareRequest.num)
  return _s;
}
inline const std::string& DEshareRequest::_internal_num() const {
  return num_.Get();
}
inline void DEshareRequest::_internal_set_num(const std::string& value) {
  
  num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DEshareRequest::_internal_mutable_num() {
  
  return num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DEshareRequest::release_num() {
  // @@protoc_insertion_point(field_release:dbquery.DEshareRequest.num)
  return num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DEshareRequest::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (num_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.DEshareRequest.num)
}

// -------------------------------------------------------------------

// DEshareResponse

// bytes d_j = 1;
inline void DEshareResponse::clear_d_j() {
  d_j_.ClearToEmpty();
}
inline const std::string& DEshareResponse::d_j() const {
  // @@protoc_insertion_point(field_get:dbquery.DEshareResponse.d_j)
  return _internal_d_j();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEshareResponse::set_d_j(ArgT0&& arg0, ArgT... args) {
 
 d_j_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.DEshareResponse.d_j)
}
inline std::string* DEshareResponse::mutable_d_j() {
  std::string* _s = _internal_mutable_d_j();
  // @@protoc_insertion_point(field_mutable:dbquery.DEshareResponse.d_j)
  return _s;
}
inline const std::string& DEshareResponse::_internal_d_j() const {
  return d_j_.Get();
}
inline void DEshareResponse::_internal_set_d_j(const std::string& value) {
  
  d_j_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DEshareResponse::_internal_mutable_d_j() {
  
  return d_j_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DEshareResponse::release_d_j() {
  // @@protoc_insertion_point(field_release:dbquery.DEshareResponse.d_j)
  return d_j_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DEshareResponse::set_allocated_d_j(std::string* d_j) {
  if (d_j != nullptr) {
    
  } else {
    
  }
  d_j_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_j,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (d_j_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    d_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.DEshareResponse.d_j)
}

// bytes e_j = 2;
inline void DEshareResponse::clear_e_j() {
  e_j_.ClearToEmpty();
}
inline const std::string& DEshareResponse::e_j() const {
  // @@protoc_insertion_point(field_get:dbquery.DEshareResponse.e_j)
  return _internal_e_j();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEshareResponse::set_e_j(ArgT0&& arg0, ArgT... args) {
 
 e_j_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.DEshareResponse.e_j)
}
inline std::string* DEshareResponse::mutable_e_j() {
  std::string* _s = _internal_mutable_e_j();
  // @@protoc_insertion_point(field_mutable:dbquery.DEshareResponse.e_j)
  return _s;
}
inline const std::string& DEshareResponse::_internal_e_j() const {
  return e_j_.Get();
}
inline void DEshareResponse::_internal_set_e_j(const std::string& value) {
  
  e_j_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DEshareResponse::_internal_mutable_e_j() {
  
  return e_j_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DEshareResponse::release_e_j() {
  // @@protoc_insertion_point(field_release:dbquery.DEshareResponse.e_j)
  return e_j_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DEshareResponse::set_allocated_e_j(std::string* e_j) {
  if (e_j != nullptr) {
    
  } else {
    
  }
  e_j_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e_j,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_j_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.DEshareResponse.e_j)
}

// -------------------------------------------------------------------

// ZshareRequest

// bytes d = 1;
inline void ZshareRequest::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& ZshareRequest::d() const {
  // @@protoc_insertion_point(field_get:dbquery.ZshareRequest.d)
  return _internal_d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZshareRequest::set_d(ArgT0&& arg0, ArgT... args) {
 
 d_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.ZshareRequest.d)
}
inline std::string* ZshareRequest::mutable_d() {
  std::string* _s = _internal_mutable_d();
  // @@protoc_insertion_point(field_mutable:dbquery.ZshareRequest.d)
  return _s;
}
inline const std::string& ZshareRequest::_internal_d() const {
  return d_.Get();
}
inline void ZshareRequest::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZshareRequest::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZshareRequest::release_d() {
  // @@protoc_insertion_point(field_release:dbquery.ZshareRequest.d)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZshareRequest::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (d_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.ZshareRequest.d)
}

// bytes e = 2;
inline void ZshareRequest::clear_e() {
  e_.ClearToEmpty();
}
inline const std::string& ZshareRequest::e() const {
  // @@protoc_insertion_point(field_get:dbquery.ZshareRequest.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZshareRequest::set_e(ArgT0&& arg0, ArgT... args) {
 
 e_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.ZshareRequest.e)
}
inline std::string* ZshareRequest::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:dbquery.ZshareRequest.e)
  return _s;
}
inline const std::string& ZshareRequest::_internal_e() const {
  return e_.Get();
}
inline void ZshareRequest::_internal_set_e(const std::string& value) {
  
  e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZshareRequest::_internal_mutable_e() {
  
  return e_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZshareRequest::release_e() {
  // @@protoc_insertion_point(field_release:dbquery.ZshareRequest.e)
  return e_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZshareRequest::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.ZshareRequest.e)
}

// string agg_id = 3;
inline void ZshareRequest::clear_agg_id() {
  agg_id_.ClearToEmpty();
}
inline const std::string& ZshareRequest::agg_id() const {
  // @@protoc_insertion_point(field_get:dbquery.ZshareRequest.agg_id)
  return _internal_agg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZshareRequest::set_agg_id(ArgT0&& arg0, ArgT... args) {
 
 agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.ZshareRequest.agg_id)
}
inline std::string* ZshareRequest::mutable_agg_id() {
  std::string* _s = _internal_mutable_agg_id();
  // @@protoc_insertion_point(field_mutable:dbquery.ZshareRequest.agg_id)
  return _s;
}
inline const std::string& ZshareRequest::_internal_agg_id() const {
  return agg_id_.Get();
}
inline void ZshareRequest::_internal_set_agg_id(const std::string& value) {
  
  agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZshareRequest::_internal_mutable_agg_id() {
  
  return agg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZshareRequest::release_agg_id() {
  // @@protoc_insertion_point(field_release:dbquery.ZshareRequest.agg_id)
  return agg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZshareRequest::set_allocated_agg_id(std::string* agg_id) {
  if (agg_id != nullptr) {
    
  } else {
    
  }
  agg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agg_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (agg_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.ZshareRequest.agg_id)
}

// -------------------------------------------------------------------

// ZshareResponse

// bytes dv_i = 1;
inline void ZshareResponse::clear_dv_i() {
  dv_i_.ClearToEmpty();
}
inline const std::string& ZshareResponse::dv_i() const {
  // @@protoc_insertion_point(field_get:dbquery.ZshareResponse.dv_i)
  return _internal_dv_i();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZshareResponse::set_dv_i(ArgT0&& arg0, ArgT... args) {
 
 dv_i_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.ZshareResponse.dv_i)
}
inline std::string* ZshareResponse::mutable_dv_i() {
  std::string* _s = _internal_mutable_dv_i();
  // @@protoc_insertion_point(field_mutable:dbquery.ZshareResponse.dv_i)
  return _s;
}
inline const std::string& ZshareResponse::_internal_dv_i() const {
  return dv_i_.Get();
}
inline void ZshareResponse::_internal_set_dv_i(const std::string& value) {
  
  dv_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZshareResponse::_internal_mutable_dv_i() {
  
  return dv_i_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZshareResponse::release_dv_i() {
  // @@protoc_insertion_point(field_release:dbquery.ZshareResponse.dv_i)
  return dv_i_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZshareResponse::set_allocated_dv_i(std::string* dv_i) {
  if (dv_i != nullptr) {
    
  } else {
    
  }
  dv_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dv_i,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dv_i_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dv_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.ZshareResponse.dv_i)
}

// bytes ev_i = 2;
inline void ZshareResponse::clear_ev_i() {
  ev_i_.ClearToEmpty();
}
inline const std::string& ZshareResponse::ev_i() const {
  // @@protoc_insertion_point(field_get:dbquery.ZshareResponse.ev_i)
  return _internal_ev_i();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZshareResponse::set_ev_i(ArgT0&& arg0, ArgT... args) {
 
 ev_i_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.ZshareResponse.ev_i)
}
inline std::string* ZshareResponse::mutable_ev_i() {
  std::string* _s = _internal_mutable_ev_i();
  // @@protoc_insertion_point(field_mutable:dbquery.ZshareResponse.ev_i)
  return _s;
}
inline const std::string& ZshareResponse::_internal_ev_i() const {
  return ev_i_.Get();
}
inline void ZshareResponse::_internal_set_ev_i(const std::string& value) {
  
  ev_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZshareResponse::_internal_mutable_ev_i() {
  
  return ev_i_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZshareResponse::release_ev_i() {
  // @@protoc_insertion_point(field_release:dbquery.ZshareResponse.ev_i)
  return ev_i_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZshareResponse::set_allocated_ev_i(std::string* ev_i) {
  if (ev_i != nullptr) {
    
  } else {
    
  }
  ev_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ev_i,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ev_i_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ev_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.ZshareResponse.ev_i)
}

// -------------------------------------------------------------------

// AggRequest

// bytes dv = 1;
inline void AggRequest::clear_dv() {
  dv_.ClearToEmpty();
}
inline const std::string& AggRequest::dv() const {
  // @@protoc_insertion_point(field_get:dbquery.AggRequest.dv)
  return _internal_dv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggRequest::set_dv(ArgT0&& arg0, ArgT... args) {
 
 dv_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.AggRequest.dv)
}
inline std::string* AggRequest::mutable_dv() {
  std::string* _s = _internal_mutable_dv();
  // @@protoc_insertion_point(field_mutable:dbquery.AggRequest.dv)
  return _s;
}
inline const std::string& AggRequest::_internal_dv() const {
  return dv_.Get();
}
inline void AggRequest::_internal_set_dv(const std::string& value) {
  
  dv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggRequest::_internal_mutable_dv() {
  
  return dv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggRequest::release_dv() {
  // @@protoc_insertion_point(field_release:dbquery.AggRequest.dv)
  return dv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggRequest::set_allocated_dv(std::string* dv) {
  if (dv != nullptr) {
    
  } else {
    
  }
  dv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dv,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dv_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.AggRequest.dv)
}

// bytes ev = 2;
inline void AggRequest::clear_ev() {
  ev_.ClearToEmpty();
}
inline const std::string& AggRequest::ev() const {
  // @@protoc_insertion_point(field_get:dbquery.AggRequest.ev)
  return _internal_ev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggRequest::set_ev(ArgT0&& arg0, ArgT... args) {
 
 ev_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.AggRequest.ev)
}
inline std::string* AggRequest::mutable_ev() {
  std::string* _s = _internal_mutable_ev();
  // @@protoc_insertion_point(field_mutable:dbquery.AggRequest.ev)
  return _s;
}
inline const std::string& AggRequest::_internal_ev() const {
  return ev_.Get();
}
inline void AggRequest::_internal_set_ev(const std::string& value) {
  
  ev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggRequest::_internal_mutable_ev() {
  
  return ev_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggRequest::release_ev() {
  // @@protoc_insertion_point(field_release:dbquery.AggRequest.ev)
  return ev_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggRequest::set_allocated_ev(std::string* ev) {
  if (ev != nullptr) {
    
  } else {
    
  }
  ev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ev,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ev_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.AggRequest.ev)
}

// -------------------------------------------------------------------

// AggResponse

// bytes res = 1;
inline void AggResponse::clear_res() {
  res_.ClearToEmpty();
}
inline const std::string& AggResponse::res() const {
  // @@protoc_insertion_point(field_get:dbquery.AggResponse.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggResponse::set_res(ArgT0&& arg0, ArgT... args) {
 
 res_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.AggResponse.res)
}
inline std::string* AggResponse::mutable_res() {
  std::string* _s = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:dbquery.AggResponse.res)
  return _s;
}
inline const std::string& AggResponse::_internal_res() const {
  return res_.Get();
}
inline void AggResponse::_internal_set_res(const std::string& value) {
  
  res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggResponse::_internal_mutable_res() {
  
  return res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggResponse::release_res() {
  // @@protoc_insertion_point(field_release:dbquery.AggResponse.res)
  return res_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggResponse::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.AggResponse.res)
}

// -------------------------------------------------------------------

// BaseFilter

// string id = 1;
inline void BaseFilter::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BaseFilter::id() const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseFilter::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.id)
}
inline std::string* BaseFilter::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dbquery.BaseFilter.id)
  return _s;
}
inline const std::string& BaseFilter::_internal_id() const {
  return id_.Get();
}
inline void BaseFilter::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseFilter::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseFilter::release_id() {
  // @@protoc_insertion_point(field_release:dbquery.BaseFilter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseFilter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.BaseFilter.id)
}

// bytes key0 = 2;
inline void BaseFilter::clear_key0() {
  key0_.ClearToEmpty();
}
inline const std::string& BaseFilter::key0() const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.key0)
  return _internal_key0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseFilter::set_key0(ArgT0&& arg0, ArgT... args) {
 
 key0_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.key0)
}
inline std::string* BaseFilter::mutable_key0() {
  std::string* _s = _internal_mutable_key0();
  // @@protoc_insertion_point(field_mutable:dbquery.BaseFilter.key0)
  return _s;
}
inline const std::string& BaseFilter::_internal_key0() const {
  return key0_.Get();
}
inline void BaseFilter::_internal_set_key0(const std::string& value) {
  
  key0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseFilter::_internal_mutable_key0() {
  
  return key0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseFilter::release_key0() {
  // @@protoc_insertion_point(field_release:dbquery.BaseFilter.key0)
  return key0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseFilter::set_allocated_key0(std::string* key0) {
  if (key0 != nullptr) {
    
  } else {
    
  }
  key0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key0,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key0_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.BaseFilter.key0)
}

// bytes key1 = 3;
inline void BaseFilter::clear_key1() {
  key1_.ClearToEmpty();
}
inline const std::string& BaseFilter::key1() const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.key1)
  return _internal_key1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseFilter::set_key1(ArgT0&& arg0, ArgT... args) {
 
 key1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.key1)
}
inline std::string* BaseFilter::mutable_key1() {
  std::string* _s = _internal_mutable_key1();
  // @@protoc_insertion_point(field_mutable:dbquery.BaseFilter.key1)
  return _s;
}
inline const std::string& BaseFilter::_internal_key1() const {
  return key1_.Get();
}
inline void BaseFilter::_internal_set_key1(const std::string& value) {
  
  key1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseFilter::_internal_mutable_key1() {
  
  return key1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseFilter::release_key1() {
  // @@protoc_insertion_point(field_release:dbquery.BaseFilter.key1)
  return key1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseFilter::set_allocated_key1(std::string* key1) {
  if (key1 != nullptr) {
    
  } else {
    
  }
  key1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dbquery.BaseFilter.key1)
}

// bool is_point = 4;
inline void BaseFilter::clear_is_point() {
  is_point_ = false;
}
inline bool BaseFilter::_internal_is_point() const {
  return is_point_;
}
inline bool BaseFilter::is_point() const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.is_point)
  return _internal_is_point();
}
inline void BaseFilter::_internal_set_is_point(bool value) {
  
  is_point_ = value;
}
inline void BaseFilter::set_is_point(bool value) {
  _internal_set_is_point(value);
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.is_point)
}

// repeated int32 s1 = 5;
inline int BaseFilter::_internal_s1_size() const {
  return s1_.size();
}
inline int BaseFilter::s1_size() const {
  return _internal_s1_size();
}
inline void BaseFilter::clear_s1() {
  s1_.Clear();
}
inline int32_t BaseFilter::_internal_s1(int index) const {
  return s1_.Get(index);
}
inline int32_t BaseFilter::s1(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.s1)
  return _internal_s1(index);
}
inline void BaseFilter::set_s1(int index, int32_t value) {
  s1_.Set(index, value);
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.s1)
}
inline void BaseFilter::_internal_add_s1(int32_t value) {
  s1_.Add(value);
}
inline void BaseFilter::add_s1(int32_t value) {
  _internal_add_s1(value);
  // @@protoc_insertion_point(field_add:dbquery.BaseFilter.s1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BaseFilter::_internal_s1() const {
  return s1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BaseFilter::s1() const {
  // @@protoc_insertion_point(field_list:dbquery.BaseFilter.s1)
  return _internal_s1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BaseFilter::_internal_mutable_s1() {
  return &s1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BaseFilter::mutable_s1() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.BaseFilter.s1)
  return _internal_mutable_s1();
}

// repeated int32 s2 = 6;
inline int BaseFilter::_internal_s2_size() const {
  return s2_.size();
}
inline int BaseFilter::s2_size() const {
  return _internal_s2_size();
}
inline void BaseFilter::clear_s2() {
  s2_.Clear();
}
inline int32_t BaseFilter::_internal_s2(int index) const {
  return s2_.Get(index);
}
inline int32_t BaseFilter::s2(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.BaseFilter.s2)
  return _internal_s2(index);
}
inline void BaseFilter::set_s2(int index, int32_t value) {
  s2_.Set(index, value);
  // @@protoc_insertion_point(field_set:dbquery.BaseFilter.s2)
}
inline void BaseFilter::_internal_add_s2(int32_t value) {
  s2_.Add(value);
}
inline void BaseFilter::add_s2(int32_t value) {
  _internal_add_s2(value);
  // @@protoc_insertion_point(field_add:dbquery.BaseFilter.s2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BaseFilter::_internal_s2() const {
  return s2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BaseFilter::s2() const {
  // @@protoc_insertion_point(field_list:dbquery.BaseFilter.s2)
  return _internal_s2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BaseFilter::_internal_mutable_s2() {
  return &s2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BaseFilter::mutable_s2() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.BaseFilter.s2)
  return _internal_mutable_s2();
}

// -------------------------------------------------------------------

// CombinedFilter

// repeated .dbquery.BaseFilter base_filters = 1;
inline int CombinedFilter::_internal_base_filters_size() const {
  return base_filters_.size();
}
inline int CombinedFilter::base_filters_size() const {
  return _internal_base_filters_size();
}
inline void CombinedFilter::clear_base_filters() {
  base_filters_.Clear();
}
inline ::dbquery::BaseFilter* CombinedFilter::mutable_base_filters(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.CombinedFilter.base_filters)
  return base_filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::BaseFilter >*
CombinedFilter::mutable_base_filters() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.CombinedFilter.base_filters)
  return &base_filters_;
}
inline const ::dbquery::BaseFilter& CombinedFilter::_internal_base_filters(int index) const {
  return base_filters_.Get(index);
}
inline const ::dbquery::BaseFilter& CombinedFilter::base_filters(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.CombinedFilter.base_filters)
  return _internal_base_filters(index);
}
inline ::dbquery::BaseFilter* CombinedFilter::_internal_add_base_filters() {
  return base_filters_.Add();
}
inline ::dbquery::BaseFilter* CombinedFilter::add_base_filters() {
  ::dbquery::BaseFilter* _add = _internal_add_base_filters();
  // @@protoc_insertion_point(field_add:dbquery.CombinedFilter.base_filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::BaseFilter >&
CombinedFilter::base_filters() const {
  // @@protoc_insertion_point(field_list:dbquery.CombinedFilter.base_filters)
  return base_filters_;
}

// bool op_is_and = 2;
inline void CombinedFilter::clear_op_is_and() {
  op_is_and_ = false;
}
inline bool CombinedFilter::_internal_op_is_and() const {
  return op_is_and_;
}
inline bool CombinedFilter::op_is_and() const {
  // @@protoc_insertion_point(field_get:dbquery.CombinedFilter.op_is_and)
  return _internal_op_is_and();
}
inline void CombinedFilter::_internal_set_op_is_and(bool value) {
  
  op_is_and_ = value;
}
inline void CombinedFilter::set_op_is_and(bool value) {
  _internal_set_op_is_and(value);
  // @@protoc_insertion_point(field_set:dbquery.CombinedFilter.op_is_and)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbquery

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_2eproto
