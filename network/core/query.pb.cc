// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#include "query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dbquery {
constexpr InitSystemRequest::InitSystemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitSystemRequestDefaultTypeInternal {
  constexpr InitSystemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSystemRequestDefaultTypeInternal() {}
  union {
    InitSystemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSystemRequestDefaultTypeInternal _InitSystemRequest_default_instance_;
constexpr InitSystemResponse::InitSystemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitSystemResponseDefaultTypeInternal {
  constexpr InitSystemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSystemResponseDefaultTypeInternal() {}
  union {
    InitSystemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSystemResponseDefaultTypeInternal _InitSystemResponse_default_instance_;
constexpr MultRequest::MultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shares0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shares1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MultRequestDefaultTypeInternal {
  constexpr MultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultRequestDefaultTypeInternal() {}
  union {
    MultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultRequestDefaultTypeInternal _MultRequest_default_instance_;
constexpr MultResponse::MultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MultResponseDefaultTypeInternal {
  constexpr MultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultResponseDefaultTypeInternal() {}
  union {
    MultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultResponseDefaultTypeInternal _MultResponse_default_instance_;
constexpr InitListRequest::InitListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_size_(0u){}
struct InitListRequestDefaultTypeInternal {
  constexpr InitListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitListRequestDefaultTypeInternal() {}
  union {
    InitListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitListRequestDefaultTypeInternal _InitListRequest_default_instance_;
constexpr InitListResponse::InitListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitListResponseDefaultTypeInternal {
  constexpr InitListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitListResponseDefaultTypeInternal() {}
  union {
    InitListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitListResponseDefaultTypeInternal _InitListResponse_default_instance_;
constexpr UpdateListRequest::UpdateListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , val_(0u){}
struct UpdateListRequestDefaultTypeInternal {
  constexpr UpdateListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateListRequestDefaultTypeInternal() {}
  union {
    UpdateListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateListRequestDefaultTypeInternal _UpdateListRequest_default_instance_;
constexpr BatchedUpdateListRequest::BatchedUpdateListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct BatchedUpdateListRequestDefaultTypeInternal {
  constexpr BatchedUpdateListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchedUpdateListRequestDefaultTypeInternal() {}
  union {
    BatchedUpdateListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchedUpdateListRequestDefaultTypeInternal _BatchedUpdateListRequest_default_instance_;
constexpr UpdateListResponse::UpdateListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateListResponseDefaultTypeInternal {
  constexpr UpdateListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateListResponseDefaultTypeInternal() {}
  union {
    UpdateListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateListResponseDefaultTypeInternal _UpdateListResponse_default_instance_;
constexpr BatchedUpdateListResponse::BatchedUpdateListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BatchedUpdateListResponseDefaultTypeInternal {
  constexpr BatchedUpdateListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchedUpdateListResponseDefaultTypeInternal() {}
  union {
    BatchedUpdateListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchedUpdateListResponseDefaultTypeInternal _BatchedUpdateListResponse_default_instance_;
constexpr InitSPPRequest::InitSPPRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_size_(0u)
  , num_buckets_(0u)
  , malicious_(false){}
struct InitSPPRequestDefaultTypeInternal {
  constexpr InitSPPRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSPPRequestDefaultTypeInternal() {}
  union {
    InitSPPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSPPRequestDefaultTypeInternal _InitSPPRequest_default_instance_;
constexpr InitSPPResponse::InitSPPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitSPPResponseDefaultTypeInternal {
  constexpr InitSPPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSPPResponseDefaultTypeInternal() {}
  union {
    InitSPPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSPPResponseDefaultTypeInternal _InitSPPResponse_default_instance_;
constexpr UpdateSPPRequest::UpdateSPPRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ab_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , val_(0u){}
struct UpdateSPPRequestDefaultTypeInternal {
  constexpr UpdateSPPRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSPPRequestDefaultTypeInternal() {}
  union {
    UpdateSPPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSPPRequestDefaultTypeInternal _UpdateSPPRequest_default_instance_;
constexpr BatchedUpdateSPPRequest::BatchedUpdateSPPRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct BatchedUpdateSPPRequestDefaultTypeInternal {
  constexpr BatchedUpdateSPPRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchedUpdateSPPRequestDefaultTypeInternal() {}
  union {
    BatchedUpdateSPPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchedUpdateSPPRequestDefaultTypeInternal _BatchedUpdateSPPRequest_default_instance_;
constexpr UpdateSPPResponse::UpdateSPPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateSPPResponseDefaultTypeInternal {
  constexpr UpdateSPPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSPPResponseDefaultTypeInternal() {}
  union {
    UpdateSPPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSPPResponseDefaultTypeInternal _UpdateSPPResponse_default_instance_;
constexpr BatchedUpdateSPPResponse::BatchedUpdateSPPResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BatchedUpdateSPPResponseDefaultTypeInternal {
  constexpr BatchedUpdateSPPResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchedUpdateSPPResponseDefaultTypeInternal() {}
  union {
    BatchedUpdateSPPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchedUpdateSPPResponseDefaultTypeInternal _BatchedUpdateSPPResponse_default_instance_;
constexpr QueryAggRequest::QueryAggRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agg_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , combined_filter_(nullptr){}
struct QueryAggRequestDefaultTypeInternal {
  constexpr QueryAggRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryAggRequestDefaultTypeInternal() {}
  union {
    QueryAggRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryAggRequestDefaultTypeInternal _QueryAggRequest_default_instance_;
constexpr QueryAggResponse::QueryAggResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p1_()
  , p2_()
  , d_i_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e_i_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leng0_(0){}
struct QueryAggResponseDefaultTypeInternal {
  constexpr QueryAggResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryAggResponseDefaultTypeInternal() {}
  union {
    QueryAggResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryAggResponseDefaultTypeInternal _QueryAggResponse_default_instance_;
constexpr DEshareRequest::DEshareRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , em_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DEshareRequestDefaultTypeInternal {
  constexpr DEshareRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DEshareRequestDefaultTypeInternal() {}
  union {
    DEshareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DEshareRequestDefaultTypeInternal _DEshareRequest_default_instance_;
constexpr DEshareResponse::DEshareResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d_j_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e_j_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DEshareResponseDefaultTypeInternal {
  constexpr DEshareResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DEshareResponseDefaultTypeInternal() {}
  union {
    DEshareResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DEshareResponseDefaultTypeInternal _DEshareResponse_default_instance_;
constexpr ZshareRequest::ZshareRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , agg_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ZshareRequestDefaultTypeInternal {
  constexpr ZshareRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZshareRequestDefaultTypeInternal() {}
  union {
    ZshareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZshareRequestDefaultTypeInternal _ZshareRequest_default_instance_;
constexpr ZshareResponse::ZshareResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dv_i_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ev_i_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ZshareResponseDefaultTypeInternal {
  constexpr ZshareResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZshareResponseDefaultTypeInternal() {}
  union {
    ZshareResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZshareResponseDefaultTypeInternal _ZshareResponse_default_instance_;
constexpr AggRequest::AggRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AggRequestDefaultTypeInternal {
  constexpr AggRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggRequestDefaultTypeInternal() {}
  union {
    AggRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggRequestDefaultTypeInternal _AggRequest_default_instance_;
constexpr AggResponse::AggResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AggResponseDefaultTypeInternal {
  constexpr AggResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggResponseDefaultTypeInternal() {}
  union {
    AggResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggResponseDefaultTypeInternal _AggResponse_default_instance_;
constexpr BaseFilter::BaseFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s1_()
  , _s1_cached_byte_size_(0)
  , s2_()
  , _s2_cached_byte_size_(0)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_point_(false){}
struct BaseFilterDefaultTypeInternal {
  constexpr BaseFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseFilterDefaultTypeInternal() {}
  union {
    BaseFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseFilterDefaultTypeInternal _BaseFilter_default_instance_;
constexpr CombinedFilter::CombinedFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_filters_()
  , op_is_and_(false){}
struct CombinedFilterDefaultTypeInternal {
  constexpr CombinedFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CombinedFilterDefaultTypeInternal() {}
  union {
    CombinedFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CombinedFilterDefaultTypeInternal _CombinedFilter_default_instance_;
}  // namespace dbquery
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_2eproto = nullptr;

const uint32_t TableStruct_query_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSystemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSystemRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSystemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSystemResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::MultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::MultRequest, shares0_),
  PROTOBUF_FIELD_OFFSET(::dbquery::MultRequest, shares1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::MultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::MultResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitListRequest, id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::InitListRequest, window_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitListResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListRequest, id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListRequest, val_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListRequest, share0_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateListRequest, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateListResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateListResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPRequest, id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPRequest, window_size_),
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPRequest, num_buckets_),
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPRequest, malicious_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::InitSPPResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, val_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, data0_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, a_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, b_),
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPRequest, ab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateSPPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateSPPRequest, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::UpdateSPPResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateSPPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::BatchedUpdateSPPResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggRequest, agg_id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggRequest, combined_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, d_i_),
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, e_i_),
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, p1_),
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, p2_),
  PROTOBUF_FIELD_OFFSET(::dbquery::QueryAggResponse, leng0_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareRequest, dm_),
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareRequest, em_),
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareRequest, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareResponse, d_j_),
  PROTOBUF_FIELD_OFFSET(::dbquery::DEshareResponse, e_j_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareRequest, d_),
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareRequest, e_),
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareRequest, agg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareResponse, dv_i_),
  PROTOBUF_FIELD_OFFSET(::dbquery::ZshareResponse, ev_i_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::AggRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::AggRequest, dv_),
  PROTOBUF_FIELD_OFFSET(::dbquery::AggRequest, ev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::AggResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::AggResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, id_),
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, key0_),
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, key1_),
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, is_point_),
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, s1_),
  PROTOBUF_FIELD_OFFSET(::dbquery::BaseFilter, s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbquery::CombinedFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dbquery::CombinedFilter, base_filters_),
  PROTOBUF_FIELD_OFFSET(::dbquery::CombinedFilter, op_is_and_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dbquery::InitSystemRequest)},
  { 7, -1, -1, sizeof(::dbquery::InitSystemResponse)},
  { 14, -1, -1, sizeof(::dbquery::MultRequest)},
  { 22, -1, -1, sizeof(::dbquery::MultResponse)},
  { 29, -1, -1, sizeof(::dbquery::InitListRequest)},
  { 37, -1, -1, sizeof(::dbquery::InitListResponse)},
  { 44, -1, -1, sizeof(::dbquery::UpdateListRequest)},
  { 53, -1, -1, sizeof(::dbquery::BatchedUpdateListRequest)},
  { 60, -1, -1, sizeof(::dbquery::UpdateListResponse)},
  { 67, -1, -1, sizeof(::dbquery::BatchedUpdateListResponse)},
  { 74, -1, -1, sizeof(::dbquery::InitSPPRequest)},
  { 84, -1, -1, sizeof(::dbquery::InitSPPResponse)},
  { 91, -1, -1, sizeof(::dbquery::UpdateSPPRequest)},
  { 103, -1, -1, sizeof(::dbquery::BatchedUpdateSPPRequest)},
  { 110, -1, -1, sizeof(::dbquery::UpdateSPPResponse)},
  { 117, -1, -1, sizeof(::dbquery::BatchedUpdateSPPResponse)},
  { 124, -1, -1, sizeof(::dbquery::QueryAggRequest)},
  { 132, -1, -1, sizeof(::dbquery::QueryAggResponse)},
  { 143, -1, -1, sizeof(::dbquery::DEshareRequest)},
  { 152, -1, -1, sizeof(::dbquery::DEshareResponse)},
  { 160, -1, -1, sizeof(::dbquery::ZshareRequest)},
  { 169, -1, -1, sizeof(::dbquery::ZshareResponse)},
  { 177, -1, -1, sizeof(::dbquery::AggRequest)},
  { 185, -1, -1, sizeof(::dbquery::AggResponse)},
  { 192, -1, -1, sizeof(::dbquery::BaseFilter)},
  { 204, -1, -1, sizeof(::dbquery::CombinedFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitSystemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitSystemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_MultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_MultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_UpdateListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_BatchedUpdateListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_UpdateListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_BatchedUpdateListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitSPPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_InitSPPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_UpdateSPPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_BatchedUpdateSPPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_UpdateSPPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_BatchedUpdateSPPResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_QueryAggRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_QueryAggResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_DEshareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_DEshareResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_ZshareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_ZshareResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_AggRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_AggResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_BaseFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbquery::_CombinedFilter_default_instance_),
};

const char descriptor_table_protodef_query_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013query.proto\022\007dbquery\" \n\021InitSystemRequ"
  "est\022\013\n\003key\030\001 \001(\014\"$\n\022InitSystemResponse\022\016"
  "\n\006result\030\001 \001(\014\"/\n\013MultRequest\022\017\n\007shares0"
  "\030\001 \001(\014\022\017\n\007shares1\030\002 \001(\014\"\033\n\014MultResponse\022"
  "\013\n\003res\030\001 \001(\014\"2\n\017InitListRequest\022\n\n\002id\030\001 "
  "\001(\014\022\023\n\013window_size\030\002 \001(\r\"\"\n\020InitListResp"
  "onse\022\016\n\006result\030\001 \001(\014\"<\n\021UpdateListReques"
  "t\022\n\n\002id\030\001 \001(\014\022\013\n\003val\030\002 \001(\r\022\016\n\006share0\030\003 \001"
  "(\014\"G\n\030BatchedUpdateListRequest\022+\n\007update"
  "s\030\001 \003(\0132\032.dbquery.UpdateListRequest\"$\n\022U"
  "pdateListResponse\022\016\n\006result\030\001 \001(\014\"+\n\031Bat"
  "chedUpdateListResponse\022\016\n\006result\030\001 \001(\014\"Y"
  "\n\016InitSPPRequest\022\n\n\002id\030\001 \001(\014\022\023\n\013window_s"
  "ize\030\002 \001(\r\022\023\n\013num_buckets\030\003 \001(\r\022\021\n\tmalici"
  "ous\030\004 \001(\010\"!\n\017InitSPPResponse\022\016\n\006result\030\001"
  " \001(\014\"\\\n\020UpdateSPPRequest\022\n\n\002id\030\001 \001(\014\022\013\n\003"
  "val\030\002 \001(\r\022\r\n\005data0\030\003 \001(\014\022\t\n\001a\030\004 \001(\014\022\t\n\001b"
  "\030\005 \001(\014\022\n\n\002ab\030\006 \001(\014\"E\n\027BatchedUpdateSPPRe"
  "quest\022*\n\007updates\030\001 \003(\0132\031.dbquery.UpdateS"
  "PPRequest\"#\n\021UpdateSPPResponse\022\016\n\006result"
  "\030\001 \001(\014\"*\n\030BatchedUpdateSPPResponse\022\016\n\006re"
  "sult\030\001 \001(\014\"S\n\017QueryAggRequest\022\016\n\006agg_id\030"
  "\001 \001(\t\0220\n\017combined_filter\030\002 \001(\0132\027.dbquery"
  ".CombinedFilter\"S\n\020QueryAggResponse\022\013\n\003d"
  "_i\030\001 \001(\014\022\013\n\003e_i\030\002 \001(\014\022\n\n\002p1\030\003 \003(\014\022\n\n\002p2\030"
  "\004 \003(\014\022\r\n\005leng0\030\005 \001(\005\"5\n\016DEshareRequest\022\n"
  "\n\002dm\030\001 \001(\014\022\n\n\002em\030\002 \001(\014\022\013\n\003num\030\003 \001(\t\"+\n\017D"
  "EshareResponse\022\013\n\003d_j\030\001 \001(\014\022\013\n\003e_j\030\002 \001(\014"
  "\"5\n\rZshareRequest\022\t\n\001d\030\001 \001(\014\022\t\n\001e\030\002 \001(\014\022"
  "\016\n\006agg_id\030\003 \001(\t\",\n\016ZshareResponse\022\014\n\004dv_"
  "i\030\001 \001(\014\022\014\n\004ev_i\030\002 \001(\014\"$\n\nAggRequest\022\n\n\002d"
  "v\030\001 \001(\014\022\n\n\002ev\030\002 \001(\014\"\032\n\013AggResponse\022\013\n\003re"
  "s\030\001 \001(\014\"^\n\nBaseFilter\022\n\n\002id\030\001 \001(\t\022\014\n\004key"
  "0\030\002 \001(\014\022\014\n\004key1\030\003 \001(\014\022\020\n\010is_point\030\004 \001(\010\022"
  "\n\n\002s1\030\005 \003(\005\022\n\n\002s2\030\006 \003(\005\"N\n\016CombinedFilte"
  "r\022)\n\014base_filters\030\001 \003(\0132\023.dbquery.BaseFi"
  "lter\022\021\n\top_is_and\030\002 \001(\0102\361\005\n\005Query\022E\n\014Sen"
  "dListInit\022\030.dbquery.InitListRequest\032\031.db"
  "query.InitListResponse\"\000\022K\n\016SendListUpda"
  "te\022\032.dbquery.UpdateListRequest\032\033.dbquery"
  ".UpdateListResponse\"\000\022`\n\025SendListBatched"
  "Update\022!.dbquery.BatchedUpdateListReques"
  "t\032\".dbquery.BatchedUpdateListResponse\"\000\022"
  "B\n\013SendSPPInit\022\027.dbquery.InitSPPRequest\032"
  "\030.dbquery.InitSPPResponse\"\000\022H\n\rSendSPPUp"
  "date\022\031.dbquery.UpdateSPPRequest\032\032.dbquer"
  "y.UpdateSPPResponse\"\000\022]\n\024SendSPPBatchedU"
  "pdate\022 .dbquery.BatchedUpdateSPPRequest\032"
  "!.dbquery.BatchedUpdateSPPResponse\"\000\022E\n\014"
  "SendAggQuery\022\030.dbquery.QueryAggRequest\032\031"
  ".dbquery.QueryAggResponse\"\000\022B\n\013SendDEsha"
  "re\022\027.dbquery.DEshareRequest\032\030.dbquery.DE"
  "shareResponse\"\000\022B\n\rSendGetZshare\022\026.dbque"
  "ry.ZshareRequest\032\027.dbquery.ZshareRespons"
  "e\"\000\0226\n\007SendAgg\022\023.dbquery.AggRequest\032\024.db"
  "query.AggResponse\"\0002\223\001\n\tAggregate\022K\n\016Sen"
  "dSystemInit\022\032.dbquery.InitSystemRequest\032"
  "\033.dbquery.InitSystemResponse\"\000\0229\n\010SendMu"
  "lt\022\024.dbquery.MultRequest\032\025.dbquery.MultR"
  "esponse\"\000B\t\n\007ex.grpcb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto = {
  false, false, 2388, descriptor_table_protodef_query_2eproto, "query.proto", 
  &descriptor_table_query_2eproto_once, nullptr, 0, 26,
  schemas, file_default_instances, TableStruct_query_2eproto::offsets,
  file_level_metadata_query_2eproto, file_level_enum_descriptors_query_2eproto, file_level_service_descriptors_query_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_query_2eproto_getter() {
  return &descriptor_table_query_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_query_2eproto(&descriptor_table_query_2eproto);
namespace dbquery {

// ===================================================================

class InitSystemRequest::_Internal {
 public:
};

InitSystemRequest::InitSystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitSystemRequest)
}
InitSystemRequest::InitSystemRequest(const InitSystemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.InitSystemRequest)
}

inline void InitSystemRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitSystemRequest::~InitSystemRequest() {
  // @@protoc_insertion_point(destructor:dbquery.InitSystemRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSystemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitSystemRequest::ArenaDtor(void* object) {
  InitSystemRequest* _this = reinterpret_cast< InitSystemRequest* >(object);
  (void)_this;
}
void InitSystemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSystemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSystemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitSystemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSystemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSystemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitSystemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitSystemRequest)
  return target;
}

size_t InitSystemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitSystemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSystemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSystemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSystemRequest::GetClassData() const { return &_class_data_; }

void InitSystemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSystemRequest *>(to)->MergeFrom(
      static_cast<const InitSystemRequest &>(from));
}


void InitSystemRequest::MergeFrom(const InitSystemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitSystemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSystemRequest::CopyFrom(const InitSystemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitSystemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSystemRequest::IsInitialized() const {
  return true;
}

void InitSystemRequest::InternalSwap(InitSystemRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSystemRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[0]);
}

// ===================================================================

class InitSystemResponse::_Internal {
 public:
};

InitSystemResponse::InitSystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitSystemResponse)
}
InitSystemResponse::InitSystemResponse(const InitSystemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.InitSystemResponse)
}

inline void InitSystemResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitSystemResponse::~InitSystemResponse() {
  // @@protoc_insertion_point(destructor:dbquery.InitSystemResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSystemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitSystemResponse::ArenaDtor(void* object) {
  InitSystemResponse* _this = reinterpret_cast< InitSystemResponse* >(object);
  (void)_this;
}
void InitSystemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSystemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSystemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitSystemResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSystemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSystemResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitSystemResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitSystemResponse)
  return target;
}

size_t InitSystemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitSystemResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSystemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSystemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSystemResponse::GetClassData() const { return &_class_data_; }

void InitSystemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSystemResponse *>(to)->MergeFrom(
      static_cast<const InitSystemResponse &>(from));
}


void InitSystemResponse::MergeFrom(const InitSystemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitSystemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSystemResponse::CopyFrom(const InitSystemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitSystemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSystemResponse::IsInitialized() const {
  return true;
}

void InitSystemResponse::InternalSwap(InitSystemResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSystemResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[1]);
}

// ===================================================================

class MultRequest::_Internal {
 public:
};

MultRequest::MultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.MultRequest)
}
MultRequest::MultRequest(const MultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shares0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shares0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shares0().empty()) {
    shares0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shares0(), 
      GetArenaForAllocation());
  }
  shares1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shares1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shares1().empty()) {
    shares1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shares1(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.MultRequest)
}

inline void MultRequest::SharedCtor() {
shares0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shares0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shares1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shares1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultRequest::~MultRequest() {
  // @@protoc_insertion_point(destructor:dbquery.MultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shares0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shares1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultRequest::ArenaDtor(void* object) {
  MultRequest* _this = reinterpret_cast< MultRequest* >(object);
  (void)_this;
}
void MultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.MultRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shares0_.ClearToEmpty();
  shares1_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes shares0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shares0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes shares1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shares1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.MultRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes shares0 = 1;
  if (!this->_internal_shares0().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_shares0(), target);
  }

  // bytes shares1 = 2;
  if (!this->_internal_shares1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shares1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.MultRequest)
  return target;
}

size_t MultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.MultRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shares0 = 1;
  if (!this->_internal_shares0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shares0());
  }

  // bytes shares1 = 2;
  if (!this->_internal_shares1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shares1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultRequest::GetClassData() const { return &_class_data_; }

void MultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultRequest *>(to)->MergeFrom(
      static_cast<const MultRequest &>(from));
}


void MultRequest::MergeFrom(const MultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.MultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_shares0().empty()) {
    _internal_set_shares0(from._internal_shares0());
  }
  if (!from._internal_shares1().empty()) {
    _internal_set_shares1(from._internal_shares1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultRequest::CopyFrom(const MultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.MultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultRequest::IsInitialized() const {
  return true;
}

void MultRequest::InternalSwap(MultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shares0_, lhs_arena,
      &other->shares0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shares1_, lhs_arena,
      &other->shares1_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[2]);
}

// ===================================================================

class MultResponse::_Internal {
 public:
};

MultResponse::MultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.MultResponse)
}
MultResponse::MultResponse(const MultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res().empty()) {
    res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.MultResponse)
}

inline void MultResponse::SharedCtor() {
res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultResponse::~MultResponse() {
  // @@protoc_insertion_point(destructor:dbquery.MultResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultResponse::ArenaDtor(void* object) {
  MultResponse* _this = reinterpret_cast< MultResponse* >(object);
  (void)_this;
}
void MultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.MultResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.MultResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->_internal_res().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.MultResponse)
  return target;
}

size_t MultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.MultResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->_internal_res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultResponse::GetClassData() const { return &_class_data_; }

void MultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultResponse *>(to)->MergeFrom(
      static_cast<const MultResponse &>(from));
}


void MultResponse::MergeFrom(const MultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.MultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res().empty()) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultResponse::CopyFrom(const MultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.MultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultResponse::IsInitialized() const {
  return true;
}

void MultResponse::InternalSwap(MultResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &res_, lhs_arena,
      &other->res_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[3]);
}

// ===================================================================

class InitListRequest::_Internal {
 public:
};

InitListRequest::InitListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitListRequest)
}
InitListRequest::InitListRequest(const InitListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  window_size_ = from.window_size_;
  // @@protoc_insertion_point(copy_constructor:dbquery.InitListRequest)
}

inline void InitListRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_size_ = 0u;
}

InitListRequest::~InitListRequest() {
  // @@protoc_insertion_point(destructor:dbquery.InitListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitListRequest::ArenaDtor(void* object) {
  InitListRequest* _this = reinterpret_cast< InitListRequest* >(object);
  (void)_this;
}
void InitListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  window_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 window_size = 2;
  if (this->_internal_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitListRequest)
  return target;
}

size_t InitListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint32 window_size = 2;
  if (this->_internal_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitListRequest::GetClassData() const { return &_class_data_; }

void InitListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitListRequest *>(to)->MergeFrom(
      static_cast<const InitListRequest &>(from));
}


void InitListRequest::MergeFrom(const InitListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitListRequest::CopyFrom(const InitListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitListRequest::IsInitialized() const {
  return true;
}

void InitListRequest::InternalSwap(InitListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(window_size_, other->window_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[4]);
}

// ===================================================================

class InitListResponse::_Internal {
 public:
};

InitListResponse::InitListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitListResponse)
}
InitListResponse::InitListResponse(const InitListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.InitListResponse)
}

inline void InitListResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitListResponse::~InitListResponse() {
  // @@protoc_insertion_point(destructor:dbquery.InitListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitListResponse::ArenaDtor(void* object) {
  InitListResponse* _this = reinterpret_cast< InitListResponse* >(object);
  (void)_this;
}
void InitListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitListResponse)
  return target;
}

size_t InitListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitListResponse::GetClassData() const { return &_class_data_; }

void InitListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitListResponse *>(to)->MergeFrom(
      static_cast<const InitListResponse &>(from));
}


void InitListResponse::MergeFrom(const InitListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitListResponse::CopyFrom(const InitListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitListResponse::IsInitialized() const {
  return true;
}

void InitListResponse::InternalSwap(InitListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[5]);
}

// ===================================================================

class UpdateListRequest::_Internal {
 public:
};

UpdateListRequest::UpdateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.UpdateListRequest)
}
UpdateListRequest::UpdateListRequest(const UpdateListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  share0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    share0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_share0().empty()) {
    share0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_share0(), 
      GetArenaForAllocation());
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:dbquery.UpdateListRequest)
}

inline void UpdateListRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
share0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  share0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
val_ = 0u;
}

UpdateListRequest::~UpdateListRequest() {
  // @@protoc_insertion_point(destructor:dbquery.UpdateListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateListRequest::ArenaDtor(void* object) {
  UpdateListRequest* _this = reinterpret_cast< UpdateListRequest* >(object);
  (void)_this;
}
void UpdateListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.UpdateListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  share0_.ClearToEmpty();
  val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes share0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_share0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.UpdateListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  // bytes share0 = 3;
  if (!this->_internal_share0().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_share0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.UpdateListRequest)
  return target;
}

size_t UpdateListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.UpdateListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes share0 = 3;
  if (!this->_internal_share0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_share0());
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateListRequest::GetClassData() const { return &_class_data_; }

void UpdateListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateListRequest *>(to)->MergeFrom(
      static_cast<const UpdateListRequest &>(from));
}


void UpdateListRequest::MergeFrom(const UpdateListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.UpdateListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_share0().empty()) {
    _internal_set_share0(from._internal_share0());
  }
  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateListRequest::CopyFrom(const UpdateListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.UpdateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateListRequest::IsInitialized() const {
  return true;
}

void UpdateListRequest::InternalSwap(UpdateListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &share0_, lhs_arena,
      &other->share0_, rhs_arena
  );
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[6]);
}

// ===================================================================

class BatchedUpdateListRequest::_Internal {
 public:
};

BatchedUpdateListRequest::BatchedUpdateListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.BatchedUpdateListRequest)
}
BatchedUpdateListRequest::BatchedUpdateListRequest(const BatchedUpdateListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbquery.BatchedUpdateListRequest)
}

inline void BatchedUpdateListRequest::SharedCtor() {
}

BatchedUpdateListRequest::~BatchedUpdateListRequest() {
  // @@protoc_insertion_point(destructor:dbquery.BatchedUpdateListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchedUpdateListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchedUpdateListRequest::ArenaDtor(void* object) {
  BatchedUpdateListRequest* _this = reinterpret_cast< BatchedUpdateListRequest* >(object);
  (void)_this;
}
void BatchedUpdateListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchedUpdateListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchedUpdateListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.BatchedUpdateListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchedUpdateListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dbquery.UpdateListRequest updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchedUpdateListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.BatchedUpdateListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dbquery.UpdateListRequest updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.BatchedUpdateListRequest)
  return target;
}

size_t BatchedUpdateListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.BatchedUpdateListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dbquery.UpdateListRequest updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchedUpdateListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchedUpdateListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchedUpdateListRequest::GetClassData() const { return &_class_data_; }

void BatchedUpdateListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchedUpdateListRequest *>(to)->MergeFrom(
      static_cast<const BatchedUpdateListRequest &>(from));
}


void BatchedUpdateListRequest::MergeFrom(const BatchedUpdateListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.BatchedUpdateListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchedUpdateListRequest::CopyFrom(const BatchedUpdateListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.BatchedUpdateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchedUpdateListRequest::IsInitialized() const {
  return true;
}

void BatchedUpdateListRequest::InternalSwap(BatchedUpdateListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchedUpdateListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[7]);
}

// ===================================================================

class UpdateListResponse::_Internal {
 public:
};

UpdateListResponse::UpdateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.UpdateListResponse)
}
UpdateListResponse::UpdateListResponse(const UpdateListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.UpdateListResponse)
}

inline void UpdateListResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateListResponse::~UpdateListResponse() {
  // @@protoc_insertion_point(destructor:dbquery.UpdateListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateListResponse::ArenaDtor(void* object) {
  UpdateListResponse* _this = reinterpret_cast< UpdateListResponse* >(object);
  (void)_this;
}
void UpdateListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.UpdateListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.UpdateListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.UpdateListResponse)
  return target;
}

size_t UpdateListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.UpdateListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateListResponse::GetClassData() const { return &_class_data_; }

void UpdateListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateListResponse *>(to)->MergeFrom(
      static_cast<const UpdateListResponse &>(from));
}


void UpdateListResponse::MergeFrom(const UpdateListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.UpdateListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateListResponse::CopyFrom(const UpdateListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.UpdateListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateListResponse::IsInitialized() const {
  return true;
}

void UpdateListResponse::InternalSwap(UpdateListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[8]);
}

// ===================================================================

class BatchedUpdateListResponse::_Internal {
 public:
};

BatchedUpdateListResponse::BatchedUpdateListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.BatchedUpdateListResponse)
}
BatchedUpdateListResponse::BatchedUpdateListResponse(const BatchedUpdateListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.BatchedUpdateListResponse)
}

inline void BatchedUpdateListResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchedUpdateListResponse::~BatchedUpdateListResponse() {
  // @@protoc_insertion_point(destructor:dbquery.BatchedUpdateListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchedUpdateListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchedUpdateListResponse::ArenaDtor(void* object) {
  BatchedUpdateListResponse* _this = reinterpret_cast< BatchedUpdateListResponse* >(object);
  (void)_this;
}
void BatchedUpdateListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchedUpdateListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchedUpdateListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.BatchedUpdateListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchedUpdateListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchedUpdateListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.BatchedUpdateListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.BatchedUpdateListResponse)
  return target;
}

size_t BatchedUpdateListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.BatchedUpdateListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchedUpdateListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchedUpdateListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchedUpdateListResponse::GetClassData() const { return &_class_data_; }

void BatchedUpdateListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchedUpdateListResponse *>(to)->MergeFrom(
      static_cast<const BatchedUpdateListResponse &>(from));
}


void BatchedUpdateListResponse::MergeFrom(const BatchedUpdateListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.BatchedUpdateListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchedUpdateListResponse::CopyFrom(const BatchedUpdateListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.BatchedUpdateListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchedUpdateListResponse::IsInitialized() const {
  return true;
}

void BatchedUpdateListResponse::InternalSwap(BatchedUpdateListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchedUpdateListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[9]);
}

// ===================================================================

class InitSPPRequest::_Internal {
 public:
};

InitSPPRequest::InitSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitSPPRequest)
}
InitSPPRequest::InitSPPRequest(const InitSPPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&window_size_, &from.window_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&malicious_) -
    reinterpret_cast<char*>(&window_size_)) + sizeof(malicious_));
  // @@protoc_insertion_point(copy_constructor:dbquery.InitSPPRequest)
}

inline void InitSPPRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&malicious_) -
    reinterpret_cast<char*>(&window_size_)) + sizeof(malicious_));
}

InitSPPRequest::~InitSPPRequest() {
  // @@protoc_insertion_point(destructor:dbquery.InitSPPRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSPPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitSPPRequest::ArenaDtor(void* object) {
  InitSPPRequest* _this = reinterpret_cast< InitSPPRequest* >(object);
  (void)_this;
}
void InitSPPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSPPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSPPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitSPPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&window_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&malicious_) -
      reinterpret_cast<char*>(&window_size_)) + sizeof(malicious_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSPPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_buckets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool malicious = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          malicious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSPPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitSPPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 window_size = 2;
  if (this->_internal_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_window_size(), target);
  }

  // uint32 num_buckets = 3;
  if (this->_internal_num_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_buckets(), target);
  }

  // bool malicious = 4;
  if (this->_internal_malicious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_malicious(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitSPPRequest)
  return target;
}

size_t InitSPPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitSPPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint32 window_size = 2;
  if (this->_internal_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_size());
  }

  // uint32 num_buckets = 3;
  if (this->_internal_num_buckets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_buckets());
  }

  // bool malicious = 4;
  if (this->_internal_malicious() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSPPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSPPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSPPRequest::GetClassData() const { return &_class_data_; }

void InitSPPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSPPRequest *>(to)->MergeFrom(
      static_cast<const InitSPPRequest &>(from));
}


void InitSPPRequest::MergeFrom(const InitSPPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitSPPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
  if (from._internal_num_buckets() != 0) {
    _internal_set_num_buckets(from._internal_num_buckets());
  }
  if (from._internal_malicious() != 0) {
    _internal_set_malicious(from._internal_malicious());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSPPRequest::CopyFrom(const InitSPPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitSPPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSPPRequest::IsInitialized() const {
  return true;
}

void InitSPPRequest::InternalSwap(InitSPPRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSPPRequest, malicious_)
      + sizeof(InitSPPRequest::malicious_)
      - PROTOBUF_FIELD_OFFSET(InitSPPRequest, window_size_)>(
          reinterpret_cast<char*>(&window_size_),
          reinterpret_cast<char*>(&other->window_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSPPRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[10]);
}

// ===================================================================

class InitSPPResponse::_Internal {
 public:
};

InitSPPResponse::InitSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.InitSPPResponse)
}
InitSPPResponse::InitSPPResponse(const InitSPPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.InitSPPResponse)
}

inline void InitSPPResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitSPPResponse::~InitSPPResponse() {
  // @@protoc_insertion_point(destructor:dbquery.InitSPPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSPPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitSPPResponse::ArenaDtor(void* object) {
  InitSPPResponse* _this = reinterpret_cast< InitSPPResponse* >(object);
  (void)_this;
}
void InitSPPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSPPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSPPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.InitSPPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSPPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitSPPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.InitSPPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.InitSPPResponse)
  return target;
}

size_t InitSPPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.InitSPPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSPPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSPPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSPPResponse::GetClassData() const { return &_class_data_; }

void InitSPPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSPPResponse *>(to)->MergeFrom(
      static_cast<const InitSPPResponse &>(from));
}


void InitSPPResponse::MergeFrom(const InitSPPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.InitSPPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSPPResponse::CopyFrom(const InitSPPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.InitSPPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSPPResponse::IsInitialized() const {
  return true;
}

void InitSPPResponse::InternalSwap(InitSPPResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSPPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[11]);
}

// ===================================================================

class UpdateSPPRequest::_Internal {
 public:
};

UpdateSPPRequest::UpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.UpdateSPPRequest)
}
UpdateSPPRequest::UpdateSPPRequest(const UpdateSPPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  data0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data0().empty()) {
    data0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data0(), 
      GetArenaForAllocation());
  }
  a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_a().empty()) {
    a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_a(), 
      GetArenaForAllocation());
  }
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_b().empty()) {
    b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_b(), 
      GetArenaForAllocation());
  }
  ab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ab().empty()) {
    ab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ab(), 
      GetArenaForAllocation());
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:dbquery.UpdateSPPRequest)
}

inline void UpdateSPPRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  a_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ab_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
val_ = 0u;
}

UpdateSPPRequest::~UpdateSPPRequest() {
  // @@protoc_insertion_point(destructor:dbquery.UpdateSPPRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSPPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateSPPRequest::ArenaDtor(void* object) {
  UpdateSPPRequest* _this = reinterpret_cast< UpdateSPPRequest* >(object);
  (void)_this;
}
void UpdateSPPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSPPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSPPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.UpdateSPPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  data0_.ClearToEmpty();
  a_.ClearToEmpty();
  b_.ClearToEmpty();
  ab_.ClearToEmpty();
  val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSPPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ab = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSPPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.UpdateSPPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  // bytes data0 = 3;
  if (!this->_internal_data0().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data0(), target);
  }

  // bytes a = 4;
  if (!this->_internal_a().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_a(), target);
  }

  // bytes b = 5;
  if (!this->_internal_b().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_b(), target);
  }

  // bytes ab = 6;
  if (!this->_internal_ab().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.UpdateSPPRequest)
  return target;
}

size_t UpdateSPPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.UpdateSPPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes data0 = 3;
  if (!this->_internal_data0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data0());
  }

  // bytes a = 4;
  if (!this->_internal_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_a());
  }

  // bytes b = 5;
  if (!this->_internal_b().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_b());
  }

  // bytes ab = 6;
  if (!this->_internal_ab().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ab());
  }

  // uint32 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSPPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSPPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSPPRequest::GetClassData() const { return &_class_data_; }

void UpdateSPPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSPPRequest *>(to)->MergeFrom(
      static_cast<const UpdateSPPRequest &>(from));
}


void UpdateSPPRequest::MergeFrom(const UpdateSPPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.UpdateSPPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_data0().empty()) {
    _internal_set_data0(from._internal_data0());
  }
  if (!from._internal_a().empty()) {
    _internal_set_a(from._internal_a());
  }
  if (!from._internal_b().empty()) {
    _internal_set_b(from._internal_b());
  }
  if (!from._internal_ab().empty()) {
    _internal_set_ab(from._internal_ab());
  }
  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSPPRequest::CopyFrom(const UpdateSPPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.UpdateSPPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSPPRequest::IsInitialized() const {
  return true;
}

void UpdateSPPRequest::InternalSwap(UpdateSPPRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data0_, lhs_arena,
      &other->data0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &a_, lhs_arena,
      &other->a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ab_, lhs_arena,
      &other->ab_, rhs_arena
  );
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSPPRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[12]);
}

// ===================================================================

class BatchedUpdateSPPRequest::_Internal {
 public:
};

BatchedUpdateSPPRequest::BatchedUpdateSPPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.BatchedUpdateSPPRequest)
}
BatchedUpdateSPPRequest::BatchedUpdateSPPRequest(const BatchedUpdateSPPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbquery.BatchedUpdateSPPRequest)
}

inline void BatchedUpdateSPPRequest::SharedCtor() {
}

BatchedUpdateSPPRequest::~BatchedUpdateSPPRequest() {
  // @@protoc_insertion_point(destructor:dbquery.BatchedUpdateSPPRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchedUpdateSPPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchedUpdateSPPRequest::ArenaDtor(void* object) {
  BatchedUpdateSPPRequest* _this = reinterpret_cast< BatchedUpdateSPPRequest* >(object);
  (void)_this;
}
void BatchedUpdateSPPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchedUpdateSPPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchedUpdateSPPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.BatchedUpdateSPPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchedUpdateSPPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dbquery.UpdateSPPRequest updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchedUpdateSPPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.BatchedUpdateSPPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dbquery.UpdateSPPRequest updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.BatchedUpdateSPPRequest)
  return target;
}

size_t BatchedUpdateSPPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.BatchedUpdateSPPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dbquery.UpdateSPPRequest updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchedUpdateSPPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchedUpdateSPPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchedUpdateSPPRequest::GetClassData() const { return &_class_data_; }

void BatchedUpdateSPPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchedUpdateSPPRequest *>(to)->MergeFrom(
      static_cast<const BatchedUpdateSPPRequest &>(from));
}


void BatchedUpdateSPPRequest::MergeFrom(const BatchedUpdateSPPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.BatchedUpdateSPPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchedUpdateSPPRequest::CopyFrom(const BatchedUpdateSPPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.BatchedUpdateSPPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchedUpdateSPPRequest::IsInitialized() const {
  return true;
}

void BatchedUpdateSPPRequest::InternalSwap(BatchedUpdateSPPRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchedUpdateSPPRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[13]);
}

// ===================================================================

class UpdateSPPResponse::_Internal {
 public:
};

UpdateSPPResponse::UpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.UpdateSPPResponse)
}
UpdateSPPResponse::UpdateSPPResponse(const UpdateSPPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.UpdateSPPResponse)
}

inline void UpdateSPPResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateSPPResponse::~UpdateSPPResponse() {
  // @@protoc_insertion_point(destructor:dbquery.UpdateSPPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSPPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateSPPResponse::ArenaDtor(void* object) {
  UpdateSPPResponse* _this = reinterpret_cast< UpdateSPPResponse* >(object);
  (void)_this;
}
void UpdateSPPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSPPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSPPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.UpdateSPPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSPPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSPPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.UpdateSPPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.UpdateSPPResponse)
  return target;
}

size_t UpdateSPPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.UpdateSPPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSPPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSPPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSPPResponse::GetClassData() const { return &_class_data_; }

void UpdateSPPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSPPResponse *>(to)->MergeFrom(
      static_cast<const UpdateSPPResponse &>(from));
}


void UpdateSPPResponse::MergeFrom(const UpdateSPPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.UpdateSPPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSPPResponse::CopyFrom(const UpdateSPPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.UpdateSPPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSPPResponse::IsInitialized() const {
  return true;
}

void UpdateSPPResponse::InternalSwap(UpdateSPPResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSPPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[14]);
}

// ===================================================================

class BatchedUpdateSPPResponse::_Internal {
 public:
};

BatchedUpdateSPPResponse::BatchedUpdateSPPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.BatchedUpdateSPPResponse)
}
BatchedUpdateSPPResponse::BatchedUpdateSPPResponse(const BatchedUpdateSPPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.BatchedUpdateSPPResponse)
}

inline void BatchedUpdateSPPResponse::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchedUpdateSPPResponse::~BatchedUpdateSPPResponse() {
  // @@protoc_insertion_point(destructor:dbquery.BatchedUpdateSPPResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchedUpdateSPPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchedUpdateSPPResponse::ArenaDtor(void* object) {
  BatchedUpdateSPPResponse* _this = reinterpret_cast< BatchedUpdateSPPResponse* >(object);
  (void)_this;
}
void BatchedUpdateSPPResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchedUpdateSPPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchedUpdateSPPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.BatchedUpdateSPPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchedUpdateSPPResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchedUpdateSPPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.BatchedUpdateSPPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.BatchedUpdateSPPResponse)
  return target;
}

size_t BatchedUpdateSPPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.BatchedUpdateSPPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchedUpdateSPPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchedUpdateSPPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchedUpdateSPPResponse::GetClassData() const { return &_class_data_; }

void BatchedUpdateSPPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchedUpdateSPPResponse *>(to)->MergeFrom(
      static_cast<const BatchedUpdateSPPResponse &>(from));
}


void BatchedUpdateSPPResponse::MergeFrom(const BatchedUpdateSPPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.BatchedUpdateSPPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchedUpdateSPPResponse::CopyFrom(const BatchedUpdateSPPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.BatchedUpdateSPPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchedUpdateSPPResponse::IsInitialized() const {
  return true;
}

void BatchedUpdateSPPResponse::InternalSwap(BatchedUpdateSPPResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchedUpdateSPPResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[15]);
}

// ===================================================================

class QueryAggRequest::_Internal {
 public:
  static const ::dbquery::CombinedFilter& combined_filter(const QueryAggRequest* msg);
};

const ::dbquery::CombinedFilter&
QueryAggRequest::_Internal::combined_filter(const QueryAggRequest* msg) {
  return *msg->combined_filter_;
}
QueryAggRequest::QueryAggRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.QueryAggRequest)
}
QueryAggRequest::QueryAggRequest(const QueryAggRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agg_id().empty()) {
    agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agg_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_combined_filter()) {
    combined_filter_ = new ::dbquery::CombinedFilter(*from.combined_filter_);
  } else {
    combined_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.QueryAggRequest)
}

inline void QueryAggRequest::SharedCtor() {
agg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combined_filter_ = nullptr;
}

QueryAggRequest::~QueryAggRequest() {
  // @@protoc_insertion_point(destructor:dbquery.QueryAggRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryAggRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete combined_filter_;
}

void QueryAggRequest::ArenaDtor(void* object) {
  QueryAggRequest* _this = reinterpret_cast< QueryAggRequest* >(object);
  (void)_this;
}
void QueryAggRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryAggRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryAggRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.QueryAggRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agg_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && combined_filter_ != nullptr) {
    delete combined_filter_;
  }
  combined_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbquery.QueryAggRequest.agg_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dbquery.CombinedFilter combined_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_combined_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryAggRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.QueryAggRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agg_id = 1;
  if (!this->_internal_agg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agg_id().data(), static_cast<int>(this->_internal_agg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbquery.QueryAggRequest.agg_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agg_id(), target);
  }

  // .dbquery.CombinedFilter combined_filter = 2;
  if (this->_internal_has_combined_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::combined_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.QueryAggRequest)
  return target;
}

size_t QueryAggRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.QueryAggRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agg_id = 1;
  if (!this->_internal_agg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agg_id());
  }

  // .dbquery.CombinedFilter combined_filter = 2;
  if (this->_internal_has_combined_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *combined_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryAggRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggRequest::GetClassData() const { return &_class_data_; }

void QueryAggRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryAggRequest *>(to)->MergeFrom(
      static_cast<const QueryAggRequest &>(from));
}


void QueryAggRequest::MergeFrom(const QueryAggRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.QueryAggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agg_id().empty()) {
    _internal_set_agg_id(from._internal_agg_id());
  }
  if (from._internal_has_combined_filter()) {
    _internal_mutable_combined_filter()->::dbquery::CombinedFilter::MergeFrom(from._internal_combined_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggRequest::CopyFrom(const QueryAggRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.QueryAggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggRequest::IsInitialized() const {
  return true;
}

void QueryAggRequest::InternalSwap(QueryAggRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agg_id_, lhs_arena,
      &other->agg_id_, rhs_arena
  );
  swap(combined_filter_, other->combined_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[16]);
}

// ===================================================================

class QueryAggResponse::_Internal {
 public:
};

QueryAggResponse::QueryAggResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  p1_(arena),
  p2_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.QueryAggResponse)
}
QueryAggResponse::QueryAggResponse(const QueryAggResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      p1_(from.p1_),
      p2_(from.p2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    d_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_i().empty()) {
    d_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d_i(), 
      GetArenaForAllocation());
  }
  e_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e_i().empty()) {
    e_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e_i(), 
      GetArenaForAllocation());
  }
  leng0_ = from.leng0_;
  // @@protoc_insertion_point(copy_constructor:dbquery.QueryAggResponse)
}

inline void QueryAggResponse::SharedCtor() {
d_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  d_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
leng0_ = 0;
}

QueryAggResponse::~QueryAggResponse() {
  // @@protoc_insertion_point(destructor:dbquery.QueryAggResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryAggResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  d_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryAggResponse::ArenaDtor(void* object) {
  QueryAggResponse* _this = reinterpret_cast< QueryAggResponse* >(object);
  (void)_this;
}
void QueryAggResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryAggResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryAggResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.QueryAggResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p1_.Clear();
  p2_.Clear();
  d_i_.ClearToEmpty();
  e_i_.ClearToEmpty();
  leng0_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes d_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_d_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes e_i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes p1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_p1();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes p2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_p2();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 leng0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leng0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryAggResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.QueryAggResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes d_i = 1;
  if (!this->_internal_d_i().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_d_i(), target);
  }

  // bytes e_i = 2;
  if (!this->_internal_e_i().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_e_i(), target);
  }

  // repeated bytes p1 = 3;
  for (int i = 0, n = this->_internal_p1_size(); i < n; i++) {
    const auto& s = this->_internal_p1(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes p2 = 4;
  for (int i = 0, n = this->_internal_p2_size(); i < n; i++) {
    const auto& s = this->_internal_p2(i);
    target = stream->WriteBytes(4, s, target);
  }

  // int32 leng0 = 5;
  if (this->_internal_leng0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_leng0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.QueryAggResponse)
  return target;
}

size_t QueryAggResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.QueryAggResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes p1 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(p1_.size());
  for (int i = 0, n = p1_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      p1_.Get(i));
  }

  // repeated bytes p2 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(p2_.size());
  for (int i = 0, n = p2_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      p2_.Get(i));
  }

  // bytes d_i = 1;
  if (!this->_internal_d_i().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_d_i());
  }

  // bytes e_i = 2;
  if (!this->_internal_e_i().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e_i());
  }

  // int32 leng0 = 5;
  if (this->_internal_leng0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leng0());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryAggResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggResponse::GetClassData() const { return &_class_data_; }

void QueryAggResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryAggResponse *>(to)->MergeFrom(
      static_cast<const QueryAggResponse &>(from));
}


void QueryAggResponse::MergeFrom(const QueryAggResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.QueryAggResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  p1_.MergeFrom(from.p1_);
  p2_.MergeFrom(from.p2_);
  if (!from._internal_d_i().empty()) {
    _internal_set_d_i(from._internal_d_i());
  }
  if (!from._internal_e_i().empty()) {
    _internal_set_e_i(from._internal_e_i());
  }
  if (from._internal_leng0() != 0) {
    _internal_set_leng0(from._internal_leng0());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggResponse::CopyFrom(const QueryAggResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.QueryAggResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggResponse::IsInitialized() const {
  return true;
}

void QueryAggResponse::InternalSwap(QueryAggResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  p1_.InternalSwap(&other->p1_);
  p2_.InternalSwap(&other->p2_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &d_i_, lhs_arena,
      &other->d_i_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e_i_, lhs_arena,
      &other->e_i_, rhs_arena
  );
  swap(leng0_, other->leng0_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[17]);
}

// ===================================================================

class DEshareRequest::_Internal {
 public:
};

DEshareRequest::DEshareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.DEshareRequest)
}
DEshareRequest::DEshareRequest(const DEshareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dm().empty()) {
    dm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dm(), 
      GetArenaForAllocation());
  }
  em_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    em_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_em().empty()) {
    em_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_em(), 
      GetArenaForAllocation());
  }
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_num().empty()) {
    num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_num(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.DEshareRequest)
}

inline void DEshareRequest::SharedCtor() {
dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
em_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  em_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DEshareRequest::~DEshareRequest() {
  // @@protoc_insertion_point(destructor:dbquery.DEshareRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DEshareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  em_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DEshareRequest::ArenaDtor(void* object) {
  DEshareRequest* _this = reinterpret_cast< DEshareRequest* >(object);
  (void)_this;
}
void DEshareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DEshareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DEshareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.DEshareRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dm_.ClearToEmpty();
  em_.ClearToEmpty();
  num_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DEshareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes dm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes em = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_em();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbquery.DEshareRequest.num"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DEshareRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.DEshareRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dm = 1;
  if (!this->_internal_dm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dm(), target);
  }

  // bytes em = 2;
  if (!this->_internal_em().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_em(), target);
  }

  // string num = 3;
  if (!this->_internal_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbquery.DEshareRequest.num");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.DEshareRequest)
  return target;
}

size_t DEshareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.DEshareRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dm = 1;
  if (!this->_internal_dm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dm());
  }

  // bytes em = 2;
  if (!this->_internal_em().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_em());
  }

  // string num = 3;
  if (!this->_internal_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DEshareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DEshareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DEshareRequest::GetClassData() const { return &_class_data_; }

void DEshareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DEshareRequest *>(to)->MergeFrom(
      static_cast<const DEshareRequest &>(from));
}


void DEshareRequest::MergeFrom(const DEshareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.DEshareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dm().empty()) {
    _internal_set_dm(from._internal_dm());
  }
  if (!from._internal_em().empty()) {
    _internal_set_em(from._internal_em());
  }
  if (!from._internal_num().empty()) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DEshareRequest::CopyFrom(const DEshareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.DEshareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEshareRequest::IsInitialized() const {
  return true;
}

void DEshareRequest::InternalSwap(DEshareRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dm_, lhs_arena,
      &other->dm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &em_, lhs_arena,
      &other->em_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &num_, lhs_arena,
      &other->num_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DEshareRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[18]);
}

// ===================================================================

class DEshareResponse::_Internal {
 public:
};

DEshareResponse::DEshareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.DEshareResponse)
}
DEshareResponse::DEshareResponse(const DEshareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    d_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_j().empty()) {
    d_j_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d_j(), 
      GetArenaForAllocation());
  }
  e_j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e_j().empty()) {
    e_j_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e_j(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.DEshareResponse)
}

inline void DEshareResponse::SharedCtor() {
d_j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  d_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e_j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_j_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DEshareResponse::~DEshareResponse() {
  // @@protoc_insertion_point(destructor:dbquery.DEshareResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DEshareResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  d_j_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e_j_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DEshareResponse::ArenaDtor(void* object) {
  DEshareResponse* _this = reinterpret_cast< DEshareResponse* >(object);
  (void)_this;
}
void DEshareResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DEshareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DEshareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.DEshareResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_j_.ClearToEmpty();
  e_j_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DEshareResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes d_j = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_d_j();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes e_j = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e_j();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DEshareResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.DEshareResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes d_j = 1;
  if (!this->_internal_d_j().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_d_j(), target);
  }

  // bytes e_j = 2;
  if (!this->_internal_e_j().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_e_j(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.DEshareResponse)
  return target;
}

size_t DEshareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.DEshareResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes d_j = 1;
  if (!this->_internal_d_j().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_d_j());
  }

  // bytes e_j = 2;
  if (!this->_internal_e_j().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e_j());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DEshareResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DEshareResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DEshareResponse::GetClassData() const { return &_class_data_; }

void DEshareResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DEshareResponse *>(to)->MergeFrom(
      static_cast<const DEshareResponse &>(from));
}


void DEshareResponse::MergeFrom(const DEshareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.DEshareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_d_j().empty()) {
    _internal_set_d_j(from._internal_d_j());
  }
  if (!from._internal_e_j().empty()) {
    _internal_set_e_j(from._internal_e_j());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DEshareResponse::CopyFrom(const DEshareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.DEshareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEshareResponse::IsInitialized() const {
  return true;
}

void DEshareResponse::InternalSwap(DEshareResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &d_j_, lhs_arena,
      &other->d_j_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e_j_, lhs_arena,
      &other->e_j_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DEshareResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[19]);
}

// ===================================================================

class ZshareRequest::_Internal {
 public:
};

ZshareRequest::ZshareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.ZshareRequest)
}
ZshareRequest::ZshareRequest(const ZshareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d().empty()) {
    d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d(), 
      GetArenaForAllocation());
  }
  e_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e().empty()) {
    e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e(), 
      GetArenaForAllocation());
  }
  agg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agg_id().empty()) {
    agg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agg_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.ZshareRequest)
}

inline void ZshareRequest::SharedCtor() {
d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agg_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZshareRequest::~ZshareRequest() {
  // @@protoc_insertion_point(destructor:dbquery.ZshareRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZshareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZshareRequest::ArenaDtor(void* object) {
  ZshareRequest* _this = reinterpret_cast< ZshareRequest* >(object);
  (void)_this;
}
void ZshareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZshareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZshareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.ZshareRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.ClearToEmpty();
  e_.ClearToEmpty();
  agg_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZshareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string agg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_agg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbquery.ZshareRequest.agg_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZshareRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.ZshareRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes d = 1;
  if (!this->_internal_d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_d(), target);
  }

  // bytes e = 2;
  if (!this->_internal_e().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_e(), target);
  }

  // string agg_id = 3;
  if (!this->_internal_agg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agg_id().data(), static_cast<int>(this->_internal_agg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbquery.ZshareRequest.agg_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_agg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.ZshareRequest)
  return target;
}

size_t ZshareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.ZshareRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes d = 1;
  if (!this->_internal_d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_d());
  }

  // bytes e = 2;
  if (!this->_internal_e().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_e());
  }

  // string agg_id = 3;
  if (!this->_internal_agg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZshareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZshareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZshareRequest::GetClassData() const { return &_class_data_; }

void ZshareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZshareRequest *>(to)->MergeFrom(
      static_cast<const ZshareRequest &>(from));
}


void ZshareRequest::MergeFrom(const ZshareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.ZshareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_d().empty()) {
    _internal_set_d(from._internal_d());
  }
  if (!from._internal_e().empty()) {
    _internal_set_e(from._internal_e());
  }
  if (!from._internal_agg_id().empty()) {
    _internal_set_agg_id(from._internal_agg_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZshareRequest::CopyFrom(const ZshareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.ZshareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZshareRequest::IsInitialized() const {
  return true;
}

void ZshareRequest::InternalSwap(ZshareRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &d_, lhs_arena,
      &other->d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e_, lhs_arena,
      &other->e_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agg_id_, lhs_arena,
      &other->agg_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZshareRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[20]);
}

// ===================================================================

class ZshareResponse::_Internal {
 public:
};

ZshareResponse::ZshareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.ZshareResponse)
}
ZshareResponse::ZshareResponse(const ZshareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dv_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dv_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dv_i().empty()) {
    dv_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dv_i(), 
      GetArenaForAllocation());
  }
  ev_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ev_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ev_i().empty()) {
    ev_i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ev_i(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.ZshareResponse)
}

inline void ZshareResponse::SharedCtor() {
dv_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dv_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ev_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ev_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZshareResponse::~ZshareResponse() {
  // @@protoc_insertion_point(destructor:dbquery.ZshareResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZshareResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dv_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ev_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZshareResponse::ArenaDtor(void* object) {
  ZshareResponse* _this = reinterpret_cast< ZshareResponse* >(object);
  (void)_this;
}
void ZshareResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZshareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZshareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.ZshareResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dv_i_.ClearToEmpty();
  ev_i_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZshareResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes dv_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dv_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ev_i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ev_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZshareResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.ZshareResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dv_i = 1;
  if (!this->_internal_dv_i().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dv_i(), target);
  }

  // bytes ev_i = 2;
  if (!this->_internal_ev_i().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ev_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.ZshareResponse)
  return target;
}

size_t ZshareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.ZshareResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dv_i = 1;
  if (!this->_internal_dv_i().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dv_i());
  }

  // bytes ev_i = 2;
  if (!this->_internal_ev_i().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ev_i());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZshareResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZshareResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZshareResponse::GetClassData() const { return &_class_data_; }

void ZshareResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZshareResponse *>(to)->MergeFrom(
      static_cast<const ZshareResponse &>(from));
}


void ZshareResponse::MergeFrom(const ZshareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.ZshareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dv_i().empty()) {
    _internal_set_dv_i(from._internal_dv_i());
  }
  if (!from._internal_ev_i().empty()) {
    _internal_set_ev_i(from._internal_ev_i());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZshareResponse::CopyFrom(const ZshareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.ZshareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZshareResponse::IsInitialized() const {
  return true;
}

void ZshareResponse::InternalSwap(ZshareResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dv_i_, lhs_arena,
      &other->dv_i_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ev_i_, lhs_arena,
      &other->ev_i_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZshareResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[21]);
}

// ===================================================================

class AggRequest::_Internal {
 public:
};

AggRequest::AggRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.AggRequest)
}
AggRequest::AggRequest(const AggRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dv().empty()) {
    dv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dv(), 
      GetArenaForAllocation());
  }
  ev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ev().empty()) {
    ev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ev(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.AggRequest)
}

inline void AggRequest::SharedCtor() {
dv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggRequest::~AggRequest() {
  // @@protoc_insertion_point(destructor:dbquery.AggRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggRequest::ArenaDtor(void* object) {
  AggRequest* _this = reinterpret_cast< AggRequest* >(object);
  (void)_this;
}
void AggRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.AggRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dv_.ClearToEmpty();
  ev_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes dv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.AggRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dv = 1;
  if (!this->_internal_dv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dv(), target);
  }

  // bytes ev = 2;
  if (!this->_internal_ev().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.AggRequest)
  return target;
}

size_t AggRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.AggRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dv = 1;
  if (!this->_internal_dv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dv());
  }

  // bytes ev = 2;
  if (!this->_internal_ev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ev());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggRequest::GetClassData() const { return &_class_data_; }

void AggRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggRequest *>(to)->MergeFrom(
      static_cast<const AggRequest &>(from));
}


void AggRequest::MergeFrom(const AggRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.AggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dv().empty()) {
    _internal_set_dv(from._internal_dv());
  }
  if (!from._internal_ev().empty()) {
    _internal_set_ev(from._internal_ev());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggRequest::CopyFrom(const AggRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.AggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggRequest::IsInitialized() const {
  return true;
}

void AggRequest::InternalSwap(AggRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dv_, lhs_arena,
      &other->dv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ev_, lhs_arena,
      &other->ev_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[22]);
}

// ===================================================================

class AggResponse::_Internal {
 public:
};

AggResponse::AggResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.AggResponse)
}
AggResponse::AggResponse(const AggResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res().empty()) {
    res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dbquery.AggResponse)
}

inline void AggResponse::SharedCtor() {
res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  res_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggResponse::~AggResponse() {
  // @@protoc_insertion_point(destructor:dbquery.AggResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggResponse::ArenaDtor(void* object) {
  AggResponse* _this = reinterpret_cast< AggResponse* >(object);
  (void)_this;
}
void AggResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.AggResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.AggResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->_internal_res().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.AggResponse)
  return target;
}

size_t AggResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.AggResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->_internal_res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggResponse::GetClassData() const { return &_class_data_; }

void AggResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggResponse *>(to)->MergeFrom(
      static_cast<const AggResponse &>(from));
}


void AggResponse::MergeFrom(const AggResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.AggResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res().empty()) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggResponse::CopyFrom(const AggResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.AggResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggResponse::IsInitialized() const {
  return true;
}

void AggResponse::InternalSwap(AggResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &res_, lhs_arena,
      &other->res_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[23]);
}

// ===================================================================

class BaseFilter::_Internal {
 public:
};

BaseFilter::BaseFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  s1_(arena),
  s2_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.BaseFilter)
}
BaseFilter::BaseFilter(const BaseFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      s1_(from.s1_),
      s2_(from.s2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  key0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key0().empty()) {
    key0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key0(), 
      GetArenaForAllocation());
  }
  key1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key1().empty()) {
    key1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key1(), 
      GetArenaForAllocation());
  }
  is_point_ = from.is_point_;
  // @@protoc_insertion_point(copy_constructor:dbquery.BaseFilter)
}

inline void BaseFilter::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key0_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_point_ = false;
}

BaseFilter::~BaseFilter() {
  // @@protoc_insertion_point(destructor:dbquery.BaseFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseFilter::ArenaDtor(void* object) {
  BaseFilter* _this = reinterpret_cast< BaseFilter* >(object);
  (void)_this;
}
void BaseFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.BaseFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s1_.Clear();
  s2_.Clear();
  id_.ClearToEmpty();
  key0_.ClearToEmpty();
  key1_.ClearToEmpty();
  is_point_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dbquery.BaseFilter.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 s1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_s1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_s1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 s2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_s2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_s2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.BaseFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dbquery.BaseFilter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes key0 = 2;
  if (!this->_internal_key0().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key0(), target);
  }

  // bytes key1 = 3;
  if (!this->_internal_key1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key1(), target);
  }

  // bool is_point = 4;
  if (this->_internal_is_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_point(), target);
  }

  // repeated int32 s1 = 5;
  {
    int byte_size = _s1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_s1(), byte_size, target);
    }
  }

  // repeated int32 s2 = 6;
  {
    int byte_size = _s2_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_s2(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.BaseFilter)
  return target;
}

size_t BaseFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.BaseFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 s1 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->s1_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _s1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 s2 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->s2_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _s2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes key0 = 2;
  if (!this->_internal_key0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key0());
  }

  // bytes key1 = 3;
  if (!this->_internal_key1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key1());
  }

  // bool is_point = 4;
  if (this->_internal_is_point() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseFilter::GetClassData() const { return &_class_data_; }

void BaseFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaseFilter *>(to)->MergeFrom(
      static_cast<const BaseFilter &>(from));
}


void BaseFilter::MergeFrom(const BaseFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.BaseFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  s1_.MergeFrom(from.s1_);
  s2_.MergeFrom(from.s2_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_key0().empty()) {
    _internal_set_key0(from._internal_key0());
  }
  if (!from._internal_key1().empty()) {
    _internal_set_key1(from._internal_key1());
  }
  if (from._internal_is_point() != 0) {
    _internal_set_is_point(from._internal_is_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseFilter::CopyFrom(const BaseFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.BaseFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFilter::IsInitialized() const {
  return true;
}

void BaseFilter::InternalSwap(BaseFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  s1_.InternalSwap(&other->s1_);
  s2_.InternalSwap(&other->s2_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key0_, lhs_arena,
      &other->key0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key1_, lhs_arena,
      &other->key1_, rhs_arena
  );
  swap(is_point_, other->is_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[24]);
}

// ===================================================================

class CombinedFilter::_Internal {
 public:
};

CombinedFilter::CombinedFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  base_filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dbquery.CombinedFilter)
}
CombinedFilter::CombinedFilter(const CombinedFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      base_filters_(from.base_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_is_and_ = from.op_is_and_;
  // @@protoc_insertion_point(copy_constructor:dbquery.CombinedFilter)
}

inline void CombinedFilter::SharedCtor() {
op_is_and_ = false;
}

CombinedFilter::~CombinedFilter() {
  // @@protoc_insertion_point(destructor:dbquery.CombinedFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CombinedFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CombinedFilter::ArenaDtor(void* object) {
  CombinedFilter* _this = reinterpret_cast< CombinedFilter* >(object);
  (void)_this;
}
void CombinedFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CombinedFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CombinedFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:dbquery.CombinedFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_filters_.Clear();
  op_is_and_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CombinedFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dbquery.BaseFilter base_filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool op_is_and = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          op_is_and_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CombinedFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbquery.CombinedFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dbquery.BaseFilter base_filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_base_filters(i), target, stream);
  }

  // bool op_is_and = 2;
  if (this->_internal_op_is_and() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_op_is_and(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbquery.CombinedFilter)
  return target;
}

size_t CombinedFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbquery.CombinedFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dbquery.BaseFilter base_filters = 1;
  total_size += 1UL * this->_internal_base_filters_size();
  for (const auto& msg : this->base_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool op_is_and = 2;
  if (this->_internal_op_is_and() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CombinedFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CombinedFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CombinedFilter::GetClassData() const { return &_class_data_; }

void CombinedFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CombinedFilter *>(to)->MergeFrom(
      static_cast<const CombinedFilter &>(from));
}


void CombinedFilter::MergeFrom(const CombinedFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbquery.CombinedFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  base_filters_.MergeFrom(from.base_filters_);
  if (from._internal_op_is_and() != 0) {
    _internal_set_op_is_and(from._internal_op_is_and());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CombinedFilter::CopyFrom(const CombinedFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbquery.CombinedFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombinedFilter::IsInitialized() const {
  return true;
}

void CombinedFilter::InternalSwap(CombinedFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  base_filters_.InternalSwap(&other->base_filters_);
  swap(op_is_and_, other->op_is_and_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CombinedFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbquery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dbquery::InitSystemRequest* Arena::CreateMaybeMessage< ::dbquery::InitSystemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitSystemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::InitSystemResponse* Arena::CreateMaybeMessage< ::dbquery::InitSystemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitSystemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::MultRequest* Arena::CreateMaybeMessage< ::dbquery::MultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::MultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::MultResponse* Arena::CreateMaybeMessage< ::dbquery::MultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::MultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::InitListRequest* Arena::CreateMaybeMessage< ::dbquery::InitListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::InitListResponse* Arena::CreateMaybeMessage< ::dbquery::InitListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::UpdateListRequest* Arena::CreateMaybeMessage< ::dbquery::UpdateListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::UpdateListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::BatchedUpdateListRequest* Arena::CreateMaybeMessage< ::dbquery::BatchedUpdateListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::BatchedUpdateListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::UpdateListResponse* Arena::CreateMaybeMessage< ::dbquery::UpdateListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::UpdateListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::BatchedUpdateListResponse* Arena::CreateMaybeMessage< ::dbquery::BatchedUpdateListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::BatchedUpdateListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::InitSPPRequest* Arena::CreateMaybeMessage< ::dbquery::InitSPPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitSPPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::InitSPPResponse* Arena::CreateMaybeMessage< ::dbquery::InitSPPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::InitSPPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::UpdateSPPRequest* Arena::CreateMaybeMessage< ::dbquery::UpdateSPPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::UpdateSPPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::BatchedUpdateSPPRequest* Arena::CreateMaybeMessage< ::dbquery::BatchedUpdateSPPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::BatchedUpdateSPPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::UpdateSPPResponse* Arena::CreateMaybeMessage< ::dbquery::UpdateSPPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::UpdateSPPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::BatchedUpdateSPPResponse* Arena::CreateMaybeMessage< ::dbquery::BatchedUpdateSPPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::BatchedUpdateSPPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::QueryAggRequest* Arena::CreateMaybeMessage< ::dbquery::QueryAggRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::QueryAggRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::QueryAggResponse* Arena::CreateMaybeMessage< ::dbquery::QueryAggResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::QueryAggResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::DEshareRequest* Arena::CreateMaybeMessage< ::dbquery::DEshareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::DEshareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::DEshareResponse* Arena::CreateMaybeMessage< ::dbquery::DEshareResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::DEshareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::ZshareRequest* Arena::CreateMaybeMessage< ::dbquery::ZshareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::ZshareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::ZshareResponse* Arena::CreateMaybeMessage< ::dbquery::ZshareResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::ZshareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::AggRequest* Arena::CreateMaybeMessage< ::dbquery::AggRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::AggRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::AggResponse* Arena::CreateMaybeMessage< ::dbquery::AggResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::AggResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::BaseFilter* Arena::CreateMaybeMessage< ::dbquery::BaseFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::BaseFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::dbquery::CombinedFilter* Arena::CreateMaybeMessage< ::dbquery::CombinedFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbquery::CombinedFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
